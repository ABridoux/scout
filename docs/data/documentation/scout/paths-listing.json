{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this article, learn how to use the paths listing feature to precisely get the paths you want."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples will refer to the following JSON file."}]},{"type":"codeListing","syntax":"json","code":["{","  \"Tom\" : {","    \"age\" : 68,","    \"hobbies\" : [","      \"cooking\",","      \"guitar\"","    ],","    \"height\" : 175","  },","  \"Robert\" : {","    \"age\" : 23,","    \"hobbies\" : [","      \"video games\",","      \"party\",","      \"tennis\"","    ],","    \"running_records\" : [","      [","        10,","        12,","        9,","        10","      ],","      [ 9,","        12,","        11","      ]","    ],","    \"height\" : 181","  },","  \"Suzanne\" : {","    \"job\" : \"actress\",","    \"movies\" : [","      {","        \"title\" : \"Tomorrow is so far\",","        \"awards\" : \"Best speech for a silent movie\"","      },","      {","        \"title\" : \"Yesterday will never go\",","        \"awards\" : \"Best title\"","      },","      {","        \"title\" : \"What about today?\"","      }","    ]","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The reference to the JSON will be held by a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json"},{"type":"text","text":" value."}]},{"type":"codeListing","syntax":"swift","code":["let json = try PathExplorers.Json(data: data)"]},{"anchor":"Basics","level":2,"type":"heading","text":"Basics"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s first see how we can list "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" the path in the file. The command"}]},{"type":"codeListing","syntax":"swift","code":["print(json.listPaths())"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"should output"}]},{"type":"codeListing","syntax":null,"code":["Robert","Robert.age","Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records","Robert.running_records[0]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Suzanne","Suzanne.job","Suzanne.movies","Suzanne.movies[0]","Suzanne.movies[0].awards","Suzanne.movies[0].title","Suzanne.movies[1]","Suzanne.movies[1].awards","Suzanne.movies[1].title","Suzanne.movies[2]","Suzanne.movies[2].title","Tom","Tom.age","Tom.height","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" is more clearly represented as a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" with a separator (default is "},{"type":"codeVoice","code":"'.'"},{"type":"text","text":"). That’s what you get by calling "},{"type":"codeVoice","code":"path.description"},{"type":"text","text":". It’s also the way paths are outputted in the terminal when using the "},{"type":"codeVoice","code":"scout"},{"type":"text","text":" command-line tool."}]}]},{"anchor":"Single-and-group-values","level":2,"type":"heading","text":"Single and group values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to target only single values (e.g. string, number…), group values (e.g. array, dictionary) or both using a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The default target is both single and group."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, to target only single values."}]},{"type":"codeListing","syntax":"swift","code":["let path = json.listPaths(","    filter: .targetOnly(.single)",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"output:"}]},{"type":"codeListing","syntax":null,"code":["Robert.age","Robert.height","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Suzanne.job","Suzanne.movies[0].awards","Suzanne.movies[0].title","Suzanne.movies[1].awards","Suzanne.movies[1].title","Suzanne.movies[2].title","Tom.age","Tom.height","Tom.hobbies[0]","Tom.hobbies[1]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, to target only group values."}]},{"type":"codeListing","syntax":"swift","code":["let path = json.listPaths(","    filter: .targetOnly(.group)",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert","Robert.hobbies","Robert.running_records","Robert.running_records[0]","Robert.running_records[1]","Suzanne","Suzanne.movies","Suzanne.movies[0]","Suzanne.movies[1]","Suzanne.movies[2]","Tom","Tom.hobbies"]},{"anchor":"Initial-path","level":2,"type":"heading","text":"Initial path"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To avoid listing all paths meeting the requirements, it’s possible to target paths having a prefix "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:)"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance to target only paths in the “Robert” dictionary”."}]},{"type":"codeListing","syntax":"swift","code":["let path = json.listPaths(","    startingAt: \"Robert\"",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.age","Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records","Robert.running_records[0]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Do note that it’s possible to use any "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"type":"text","text":" in the provided initial path."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance to target paths in the Robert "},{"type":"emphasis","inlineContent":[{"type":"text","text":"or"}]},{"type":"text","text":" Tom dictionaries."}]},{"type":"codeListing","syntax":"swift","code":["let path = json.listPaths(","    startingAt: .filter(\"Robert|Tom\")",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert","Robert.age","Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records","Robert.running_records[0]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Tom","Tom.age","Tom.height","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A last example with paths leading to Suzanne’s movies titles."}]},{"type":"codeListing","syntax":"swift","code":["let path = json.listPaths(","    startingAt: \"Suzanne\", \"movies\", .slice(.first, .last), \"title\"",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Suzanne.movies[0].title","Suzanne.movies[1].title","Suzanne.movies[2].title"]},{"anchor":"Filter-keys","level":2,"type":"heading","text":"Filter keys"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to provide a regular expression to filter the paths final key. Only the paths that contain a key validated by the regular expression will be retrieved. It’s required to provide a "},{"type":"codeVoice","code":"NSRegularExpression"},{"type":"text","text":". Meanwhile, the convenience initialiser "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/key(pattern:target:)"},{"type":"text","text":" takes a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" pattern and tries to convert to a "},{"type":"codeVoice","code":"NSRegularExpression."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"List all the paths leading to a key “hobbies”."}]},{"type":"codeListing","syntax":"swift","code":["let path = try json.listPaths(","    filter: .key(pattern: \"hobbies\")",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"List all the paths leading to a key starting with “h”."}]},{"type":"codeListing","syntax":"swift","code":["let path = try json.listPaths(","    filter: .key(pattern: \"h.*\")",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Tom.height","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"]},{"anchor":"Filter-values","level":2,"type":"heading","text":"Filter values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The values can be filtered with one ore more predicates with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/value(_:)"},{"type":"text","text":". When such a filter is specified, only the single values are targeted."},{"type":"text","text":" "},{"type":"text","text":"A path whose value is validated by one of the provided predicates is retrieved."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two kinds of predicates are offered: "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/ExpressionPredicate"},{"type":"text","text":" that takes a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" boolean expression and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/FunctionPredicate"},{"type":"text","text":" that takes a function to filter the values. Both implement the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/ValuePredicate"},{"type":"text","text":" protocol."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"List the paths leading to a value below 70 with a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/FunctionPredicate"}]},{"type":"codeListing","syntax":"swift","code":["let predicate = PathsFilter.FunctionPredicate { value in","    switch value {","        case let .int(int):","            return int < 70","        case let .double(double):","            return double < 70","        default:","            return false \/\/ ignore other values","    }","}","","let path = try json.listPaths(","    filter: .value(predicate)",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.age","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Tom.age"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Returning false or throwing an error when the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue"},{"type":"text","text":" parameter has not a proper type for the predicate depends on your needs."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To mention it once, the  "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/ExpressionPredicate"},{"type":"text","text":" is used with a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" boolean expression. If it’s mainly used for the command-line tool, it’s possible to use in Swift. The code above could be written like so"}]},{"type":"codeListing","syntax":"swift","code":["let path = try json.listPaths(","    filter: .value(\"value < 70\")",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The name ‘value’ is used to specify the value that will be filtered, and is replaced by the value to evaluate at runtime by Scout."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to specify several predicates. Doing so, a value will be validated as long as one predicate validates it."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance to get string values starting with ‘guit’ "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" values that are greater than 20."}]},{"type":"codeListing","syntax":"swift","code":["let prefixPredicate = PathsFilter.FunctionPredicate { value in","    guard case let .string(string) = value else { return false }","    return string.hasPrefix(\"guit\")","}","","let comparisonPredicate = PathsFilter.FunctionPredicate { value in","    guard case let .int(int) = value else { return false }","    return int > 20","}","","let paths = try json.listPaths(","    filter: .value(prefixPredicate, comparisonPredicate)",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.age","Robert.height","Tom.age","Tom.height","Tom.hobbies[1]"]},{"anchor":"Mixing-up","level":2,"type":"heading","text":"Mixing up"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, it’s worthing noting that all features to filter paths can be mixed up."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance to list paths leading to Robert hobbies that contain the word “game”."}]},{"type":"codeListing","syntax":"swift","code":["let gamePredicate = PathsFilter.FunctionPredicate { value in","    guard case let .string(string) = value else { return false }","    return string.contains(\"games\")","}","","let paths = try json.listPaths(","    startingAt: \"Robert\", \"hobbies\",","    filter: .value(gamePredicate)",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.hobbies[0]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"List paths leading to Robert or Tom hobbies arrays (group values)."}]},{"type":"codeListing","syntax":"swift","code":["let paths = try json.listPaths(","    startingAt: .filter(\"Tom|Robert\"),","    filter: .key(pattern: \"hobbies\", target: .group)",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.hobbies","Tom.hobbies"]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/scout\/paths-listing"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Scout\/documentation\/Scout\/paths-listing","interfaceLanguage":"swift"},"abstract":[{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" list path features is useful to get all paths leading to a value or a key."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Paths listing","role":"article","modules":[{"name":"Scout"}]},"hierarchy":{"paths":[["doc:\/\/Scout\/documentation\/Scout"]]},"seeAlsoSections":[{"title":"Manipulate paths","identifiers":["doc:\/\/Scout\/documentation\/Scout\/mastering-paths","doc:\/\/Scout\/documentation\/Scout\/Path","doc:\/\/Scout\/documentation\/Scout\/PathElement","doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","doc:\/\/Scout\/documentation\/Scout\/PathsFilter","doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","doc:\/\/Scout\/documentation\/Scout\/Bounds"],"generated":true}],"references":{"doc://Scout/documentation/Scout/mastering-paths":{"role":"article","title":"Mastering Paths","abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path"},{"type":"text","text":"s are provided to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"},{"type":"text","text":" to navigate through or manipulate data precisely."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/mastering-paths","kind":"article","type":"topic","url":"\/documentation\/scout\/mastering-paths"},"doc://Scout/documentation/Scout/PathExplorers/Json":{"role":"symbol","title":"PathExplorers.Json","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Json"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Json"}],"url":"\/documentation\/scout\/pathexplorers\/json"},"doc://Scout/documentation/Scout/PathExplorer/listPaths(startingAt:)":{"role":"symbol","title":"listPaths(startingAt:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"listPaths"},{"kind":"text","text":"("},{"kind":"externalParam","text":"startingAt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Path","preciseIdentifier":"s:5Scout4PathV"},{"kind":"text","text":"?) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Path","preciseIdentifier":"s:5Scout4PathV"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Returns all the paths leading to single or group values"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:)","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:)"},"doc://Scout/documentation/Scout/PathsFilter/value(_:)":{"role":"symbol","title":"PathsFilter.value(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","text":"ValuePredicate","preciseIdentifier":"s:5Scout14ValuePredicateP"},{"kind":"text","text":"])"}],"abstract":[{"type":"text","text":"Filter the value based on predicates. The value is valid when one of the predicates validates it."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/value(_:)","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathsfilter\/value(_:)"},"doc://Scout/documentation/Scout/PathsFilter/FunctionPredicate":{"role":"symbol","title":"PathsFilter.FunctionPredicate","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"FunctionPredicate"}],"abstract":[{"type":"text","text":"Specify a function to filter the value"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/FunctionPredicate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FunctionPredicate"}],"url":"\/documentation\/scout\/pathsfilter\/functionpredicate"},"doc://Scout/documentation/Scout/PathsFilter/ExpressionPredicate":{"role":"symbol","title":"PathsFilter.ExpressionPredicate","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExpressionPredicate"}],"abstract":[{"type":"text","text":"Specify a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" boolean expression to filter the value"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/ExpressionPredicate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExpressionPredicate"}],"url":"\/documentation\/scout\/pathsfilter\/expressionpredicate"},"doc://Scout/documentation/Scout/PathElement":{"role":"symbol","title":"PathElement","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathElement"}],"abstract":[{"type":"text","text":"The possible elements that can be used to subscript a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathElement"}],"url":"\/documentation\/scout\/pathelement"},"doc://Scout/documentation/Scout/ValuePredicate":{"role":"symbol","title":"ValuePredicate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValuePredicate"}],"abstract":[{"type":"text","text":"Expression or function to evaluate a value"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValuePredicate"}],"url":"\/documentation\/scout\/valuepredicate"},"doc://Scout/documentation/Scout/PathsFilter/key(pattern:target:)":{"role":"symbol","title":"key(pattern:target:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"key"},{"kind":"text","text":"("},{"kind":"externalParam","text":"pattern"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"target"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PathsFilter","preciseIdentifier":"s:5Scout11PathsFilterO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"ValueTarget","preciseIdentifier":"s:5Scout11PathsFilterO11ValueTargetO"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"PathsFilter","preciseIdentifier":"s:5Scout11PathsFilterO"}],"abstract":[{"type":"text","text":"Key filter with a pattern for the regular expression."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/key(pattern:target:)","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathsfilter\/key(pattern:target:)"},"doc://Scout/documentation/Scout/Path":{"role":"symbol","title":"Path","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Path"}],"abstract":[{"type":"text","text":"Collection of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"type":"text","text":"s to subscript a "},{"type":"codeVoice","code":"PathExplorer"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Path"}],"url":"\/documentation\/scout\/path"},"doc://Scout/documentation/Scout/PathElementRepresentable":{"role":"symbol","title":"PathElementRepresentable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathElementRepresentable"}],"abstract":[{"type":"text","text":"Protocol to allow to subscript a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" without using directly the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"type":"text","text":" enum."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathElementRepresentable"}],"url":"\/documentation\/scout\/pathelementrepresentable"},"doc://Scout/documentation/Scout/Bounds":{"role":"symbol","title":"Bounds","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bounds"}],"abstract":[{"type":"text","text":"Lower and upper bounds to be used to slice an array"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/Bounds","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Bounds"}],"url":"\/documentation\/scout\/bounds"},"doc://Scout/documentation/Scout/PathExplorer/listPaths(startingAt:filter:)-4tkeq":{"defaultImplementations":1,"role":"symbol","title":"listPaths(startingAt:filter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"listPaths"},{"kind":"text","text":"("},{"kind":"externalParam","text":"startingAt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Path","preciseIdentifier":"s:5Scout4PathV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"filter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PathsFilter","preciseIdentifier":"s:5Scout11PathsFilterO"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Path","preciseIdentifier":"s:5Scout4PathV"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Returns all the paths leading to single or group values"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-4tkeq"},"doc://Scout/documentation/Scout/PathsFilter":{"role":"symbol","title":"PathsFilter","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathsFilter"}],"abstract":[{"type":"text","text":"Provided to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq"},{"type":"text","text":" function to target specific paths when listing them."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathsFilter"}],"url":"\/documentation\/scout\/pathsfilter"},"doc://Scout/documentation/Scout":{"role":"collection","title":"Scout","abstract":[{"type":"text","text":"This library aims to make specific formats data values reading and writing simple when the data format is not known at build time."}],"identifier":"doc:\/\/Scout\/documentation\/Scout","kind":"symbol","type":"topic","url":"\/documentation\/scout"},"doc://Scout/documentation/Scout/PathExplorer":{"role":"symbol","title":"PathExplorer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathExplorer"}],"abstract":[{"type":"text","text":"Wrap several structs to explore several format: Json, Plist, YAML and Xml"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathExplorer"}],"url":"\/documentation\/scout\/pathexplorer"},"doc://Scout/documentation/Scout/ExplorerValue":{"role":"symbol","title":"ExplorerValue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExplorerValue"}],"abstract":[{"type":"text","text":"The values a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" can take"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExplorerValue"}],"url":"\/documentation\/scout\/explorervalue"}}}