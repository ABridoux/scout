{"seeAlsoSections":[{"identifiers":["doc:\/\/Scout\/documentation\/Scout\/mastering-paths","doc:\/\/Scout\/documentation\/Scout\/Path","doc:\/\/Scout\/documentation\/Scout\/PathElement","doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","doc:\/\/Scout\/documentation\/Scout\/PathsFilter","doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","doc:\/\/Scout\/documentation\/Scout\/Bounds"],"title":"Manipulate paths","generated":true}],"variants":[{"paths":["\/documentation\/scout\/paths-listing"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Article","role":"article","title":"Paths listing","modules":[{"name":"Scout"}]},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"In this article, learn how to use the paths listing feature to precisely get the paths you want."}],"type":"paragraph"},{"inlineContent":[{"text":"The examples will refer to the following JSON file.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"json","code":["{","  \"Tom\" : {","    \"age\" : 68,","    \"hobbies\" : [","      \"cooking\",","      \"guitar\"","    ],","    \"height\" : 175","  },","  \"Robert\" : {","    \"age\" : 23,","    \"hobbies\" : [","      \"video games\",","      \"party\",","      \"tennis\"","    ],","    \"running_records\" : [","      [","        10,","        12,","        9,","        10","      ],","      [ 9,","        12,","        11","      ]","    ],","    \"height\" : 181","  },","  \"Suzanne\" : {","    \"job\" : \"actress\",","    \"movies\" : [","      {","        \"title\" : \"Tomorrow is so far\",","        \"awards\" : \"Best speech for a silent movie\"","      },","      {","        \"title\" : \"Yesterday will never go\",","        \"awards\" : \"Best title\"","      },","      {","        \"title\" : \"What about today?\"","      }","    ]","  }","}"]},{"inlineContent":[{"text":"The reference to the JSON will be held by a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json"},{"type":"text","text":" value."}],"type":"paragraph"},{"type":"codeListing","code":["let json = try PathExplorers.Json(data: data)"],"syntax":"swift"},{"type":"heading","level":2,"text":"Basics","anchor":"Basics"},{"inlineContent":[{"text":"Let’s first see how we can list ","type":"text"},{"inlineContent":[{"type":"text","text":"all"}],"type":"emphasis"},{"type":"text","text":" the path in the file. The command"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["print(json.listPaths())"]},{"inlineContent":[{"type":"text","text":"should output"}],"type":"paragraph"},{"type":"codeListing","code":["Robert","Robert.age","Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records","Robert.running_records[0]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Suzanne","Suzanne.job","Suzanne.movies","Suzanne.movies[0]","Suzanne.movies[0].awards","Suzanne.movies[0].title","Suzanne.movies[1]","Suzanne.movies[1].awards","Suzanne.movies[1].title","Suzanne.movies[2]","Suzanne.movies[2].title","Tom","Tom.age","Tom.height","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"],"syntax":null},{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"code":"Path","type":"codeVoice"},{"type":"text","text":" is more clearly represented as a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" with a separator (default is "},{"type":"codeVoice","code":"'.'"},{"text":"). That’s what you get by calling ","type":"text"},{"type":"codeVoice","code":"path.description"},{"text":". It’s also the way paths are outputted in the terminal when using the ","type":"text"},{"type":"codeVoice","code":"scout"},{"type":"text","text":" command-line tool."}],"type":"paragraph"}],"style":"note","type":"aside","name":"Note"},{"type":"heading","level":2,"anchor":"Single-and-group-values","text":"Single and group values"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to target only single values (e.g. string, number…), group values (e.g. array, dictionary) or both using a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"The default target is both single and group."}]},{"inlineContent":[{"text":"For instance, to target only single values.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let path = json.listPaths(","    filter: .targetOnly(.single)",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"output:"}]},{"code":["Robert.age","Robert.height","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Suzanne.job","Suzanne.movies[0].awards","Suzanne.movies[0].title","Suzanne.movies[1].awards","Suzanne.movies[1].title","Suzanne.movies[2].title","Tom.age","Tom.height","Tom.hobbies[0]","Tom.hobbies[1]"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Similarly, to target only group values.","type":"text"}]},{"type":"codeListing","code":["let path = json.listPaths(","    filter: .targetOnly(.group)",")","print(paths)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"outputs:","type":"text"}]},{"syntax":null,"code":["Robert","Robert.hobbies","Robert.running_records","Robert.running_records[0]","Robert.running_records[1]","Suzanne","Suzanne.movies","Suzanne.movies[0]","Suzanne.movies[1]","Suzanne.movies[2]","Tom","Tom.hobbies"],"type":"codeListing"},{"anchor":"Initial-path","type":"heading","text":"Initial path","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"To avoid listing all paths meeting the requirements, it’s possible to target paths having a prefix "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:)","type":"reference","isActive":true},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance to target only paths in the “Robert” dictionary”."}]},{"code":["let path = json.listPaths(","    startingAt: \"Robert\"",")","print(paths)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.age","Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records","Robert.running_records[0]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]"]},{"inlineContent":[{"type":"text","text":"Do note that it’s possible to use any "},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","isActive":true},{"type":"text","text":" in the provided initial path."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For instance to target paths in the Robert ","type":"text"},{"inlineContent":[{"type":"text","text":"or"}],"type":"emphasis"},{"text":" Tom dictionaries.","type":"text"}]},{"code":["let path = json.listPaths(","    startingAt: .filter(\"Robert|Tom\")",")","print(paths)"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"outputs:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Robert","Robert.age","Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Robert.running_records","Robert.running_records[0]","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Tom","Tom.age","Tom.height","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"A last example with paths leading to Suzanne’s movies titles."}]},{"syntax":"swift","type":"codeListing","code":["let path = json.listPaths(","    startingAt: \"Suzanne\", \"movies\", .slice(.first, .last), \"title\"",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"code":["Suzanne.movies[0].title","Suzanne.movies[1].title","Suzanne.movies[2].title"],"type":"codeListing","syntax":null},{"anchor":"Filter-keys","level":2,"type":"heading","text":"Filter keys"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to provide a regular expression to filter the paths final key. Only the paths that contain a key validated by the regular expression will be retrieved. It’s required to provide a "},{"code":"NSRegularExpression","type":"codeVoice"},{"text":". Meanwhile, the convenience initialiser ","type":"text"},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/key(pattern:target:)","isActive":true,"type":"reference"},{"text":" takes a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" pattern and tries to convert to a ","type":"text"},{"code":"NSRegularExpression.","type":"codeVoice"}]},{"type":"paragraph","inlineContent":[{"text":"List all the paths leading to a key “hobbies”.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let path = try json.listPaths(","    filter: .key(pattern: \"hobbies\")",")","print(paths)"]},{"inlineContent":[{"text":"outputs:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"List all the paths leading to a key starting with “h”.","type":"text"}]},{"code":["let path = try json.listPaths(","    filter: .key(pattern: \"h.*\")",")","print(paths)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"outputs:"}],"type":"paragraph"},{"code":["Robert.height","Robert.hobbies","Robert.hobbies[0]","Robert.hobbies[1]","Robert.hobbies[2]","Tom.height","Tom.hobbies","Tom.hobbies[0]","Tom.hobbies[1]"],"type":"codeListing","syntax":null},{"level":2,"type":"heading","anchor":"Filter-values","text":"Filter values"},{"type":"paragraph","inlineContent":[{"text":"The values can be filtered with one ore more predicates with ","type":"text"},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/value(_:)","isActive":true,"type":"reference"},{"type":"text","text":". When such a filter is specified, only the single values are targeted."},{"text":" ","type":"text"},{"type":"text","text":"A path whose value is validated by one of the provided predicates is retrieved."}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Two kinds of predicates are offered: ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/ExpressionPredicate"},{"type":"text","text":" that takes a "},{"type":"codeVoice","code":"String"},{"text":" boolean expression and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/FunctionPredicate"},{"text":" that takes a function to filter the values. Both implement the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/ValuePredicate"},{"text":" protocol.","type":"text"}]}],"style":"note","name":"Note"},{"inlineContent":[{"type":"text","text":"List the paths leading to a value below 70 with a "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/FunctionPredicate","type":"reference","isActive":true}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let predicate = PathsFilter.FunctionPredicate { value in","    switch value {","        case let .int(int):","            return int < 70","        case let .double(double):","            return double < 70","        default:","            return false \/\/ ignore other values","    }","}","","let path = try json.listPaths(","    filter: .value(predicate)",")","print(paths)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","syntax":null,"code":["Robert.age","Robert.running_records[0][0]","Robert.running_records[0][1]","Robert.running_records[0][2]","Robert.running_records[0][3]","Robert.running_records[1][0]","Robert.running_records[1][1]","Robert.running_records[1][2]","Tom.age"]},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"Returning false or throwing an error when the ","type":"text"},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue","isActive":true,"type":"reference"},{"type":"text","text":" parameter has not a proper type for the predicate depends on your needs."}],"type":"paragraph"}],"name":"Note"},{"inlineContent":[{"text":"To mention it once, the  ","type":"text"},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/ExpressionPredicate","isActive":true},{"type":"text","text":" is used with a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" boolean expression. If it’s mainly used for the command-line tool, it’s possible to use in Swift. The code above could be written like so"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let path = try json.listPaths(","    filter: .value(\"value < 70\")",")"]},{"type":"paragraph","inlineContent":[{"text":"The name ‘value’ is used to specify the value that will be filtered, and is replaced by the value to evaluate at runtime by Scout.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to specify several predicates. Doing so, a value will be validated as long as one predicate validates it."}]},{"type":"paragraph","inlineContent":[{"text":"For instance to get string values starting with ‘guit’ ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" values that are greater than 20."}]},{"code":["let prefixPredicate = PathsFilter.FunctionPredicate { value in","    guard case let .string(string) = value else { return false }","    return string.hasPrefix(\"guit\")","}","","let comparisonPredicate = PathsFilter.FunctionPredicate { value in","    guard case let .int(int) = value else { return false }","    return int > 20","}","","let paths = try json.listPaths(","    filter: .value(prefixPredicate, comparisonPredicate)",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"outputs:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["Robert.age","Robert.height","Tom.age","Tom.height","Tom.hobbies[1]"],"type":"codeListing"},{"text":"Mixing up","anchor":"Mixing-up","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Finally, it’s worthing noting that all features to filter paths can be mixed up."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance to list paths leading to Robert hobbies that contain the word “game”."}]},{"code":["let gamePredicate = PathsFilter.FunctionPredicate { value in","    guard case let .string(string) = value else { return false }","    return string.contains(\"games\")","}","","let paths = try json.listPaths(","    startingAt: \"Robert\", \"hobbies\",","    filter: .value(gamePredicate)",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"outputs:"}],"type":"paragraph"},{"type":"codeListing","code":["Robert.hobbies[0]"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"List paths leading to Robert or Tom hobbies arrays (group values)."}]},{"syntax":"swift","code":["let paths = try json.listPaths(","    startingAt: .filter(\"Tom|Robert\"),","    filter: .key(pattern: \"hobbies\", target: .group)",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"outputs:"}]},{"type":"codeListing","code":["Robert.hobbies","Tom.hobbies"],"syntax":null}]}],"kind":"article","sections":[],"hierarchy":{"paths":[["doc:\/\/Scout\/documentation\/Scout"]]},"abstract":[{"type":"codeVoice","code":"PathExplorer"},{"text":" list path features is useful to get all paths leading to a value or a key.","type":"text"}],"identifier":{"url":"doc:\/\/Scout\/documentation\/Scout\/paths-listing","interfaceLanguage":"swift"},"references":{"doc://Scout/documentation/Scout/Bounds":{"abstract":[{"type":"text","text":"Lower and upper bounds to be used to slice an array"}],"type":"topic","url":"\/documentation\/scout\/bounds","role":"symbol","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/Bounds","title":"Bounds","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Bounds"}],"navigatorTitle":[{"kind":"identifier","text":"Bounds"}]},"doc://Scout/documentation/Scout/PathsFilter":{"type":"topic","url":"\/documentation\/scout\/pathsfilter","abstract":[{"text":"Provided to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq","isActive":true},{"type":"text","text":" function to target specific paths when listing them."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter","title":"PathsFilter","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PathsFilter","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PathsFilter"}]},"doc://Scout/documentation/Scout/mastering-paths":{"type":"topic","url":"\/documentation\/scout\/mastering-paths","abstract":[{"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path","type":"reference","isActive":true},{"type":"text","text":"s are provided to a "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","isActive":true,"type":"reference"},{"text":" to navigate through or manipulate data precisely.","type":"text"}],"role":"article","kind":"article","identifier":"doc:\/\/Scout\/documentation\/Scout\/mastering-paths","title":"Mastering Paths"},"doc://Scout/documentation/Scout/PathsFilter/value(_:)":{"role":"symbol","title":"PathsFilter.value(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"value","kind":"identifier"},{"kind":"text","text":"(["},{"kind":"typeIdentifier","preciseIdentifier":"s:5Scout14ValuePredicateP","text":"ValuePredicate"},{"text":"])","kind":"text"}],"type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/value(_:)","kind":"symbol","url":"\/documentation\/scout\/pathsfilter\/value(_:)","abstract":[{"text":"Filter the value based on predicates. The value is valid when one of the predicates validates it.","type":"text"}]},"doc://Scout/documentation/Scout/PathElement":{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","url":"\/documentation\/scout\/pathelement","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathElement","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"PathElement","kind":"identifier"}],"title":"PathElement","abstract":[{"type":"text","text":"The possible elements that can be used to subscript a "},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","isActive":true}],"kind":"symbol","role":"symbol"},"doc://Scout/documentation/Scout/ValuePredicate":{"abstract":[{"text":"Expression or function to evaluate a value","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValuePredicate"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValuePredicate"}],"title":"ValuePredicate","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","url":"\/documentation\/scout\/valuepredicate","role":"symbol"},"doc://Scout/documentation/Scout/PathExplorers/Json":{"title":"PathExplorers.Json","role":"symbol","url":"\/documentation\/scout\/pathexplorers\/json","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json","navigatorTitle":[{"text":"Json","kind":"identifier"}],"kind":"symbol","abstract":[],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Json"}]},"doc://Scout/documentation/Scout/ExplorerValue":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExplorerValue"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue","title":"ExplorerValue","abstract":[{"type":"text","text":"The values a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" can take"}],"role":"symbol","navigatorTitle":[{"text":"ExplorerValue","kind":"identifier"}],"url":"\/documentation\/scout\/explorervalue"},"doc://Scout/documentation/Scout/PathElementRepresentable":{"abstract":[{"text":"Protocol to allow to subscript a ","type":"text"},{"type":"codeVoice","code":"PathExplorer"},{"text":" without using directly the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"text":" enum.","type":"text"}],"type":"topic","url":"\/documentation\/scout\/pathelementrepresentable","role":"symbol","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","title":"PathElementRepresentable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PathElementRepresentable"}],"navigatorTitle":[{"text":"PathElementRepresentable","kind":"identifier"}]},"doc://Scout/documentation/Scout":{"abstract":[{"type":"text","text":"This library aims to make specific formats data values reading and writing simple when the data format is not known at build time."}],"identifier":"doc:\/\/Scout\/documentation\/Scout","url":"\/documentation\/scout","type":"topic","role":"collection","title":"Scout","kind":"symbol"},"doc://Scout/documentation/Scout/PathsFilter/FunctionPredicate":{"url":"\/documentation\/scout\/pathsfilter\/functionpredicate","navigatorTitle":[{"kind":"identifier","text":"FunctionPredicate"}],"type":"topic","title":"PathsFilter.FunctionPredicate","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/FunctionPredicate","role":"symbol","kind":"symbol","abstract":[{"text":"Specify a function to filter the value","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FunctionPredicate"}]},"doc://Scout/documentation/Scout/Path":{"navigatorTitle":[{"text":"Path","kind":"identifier"}],"abstract":[{"type":"text","text":"Collection of "},{"isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","type":"reference"},{"type":"text","text":"s to subscript a "},{"type":"codeVoice","code":"PathExplorer"}],"type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/Path","kind":"symbol","title":"Path","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Path"}],"url":"\/documentation\/scout\/path","role":"symbol"},"doc://Scout/documentation/Scout/PathExplorer/listPaths(startingAt:filter:)-4tkeq":{"abstract":[{"text":"Returns all the paths leading to single or group values","type":"text"}],"type":"topic","url":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-4tkeq","role":"symbol","kind":"symbol","required":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq","title":"listPaths(startingAt:filter:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"listPaths","kind":"identifier"},{"kind":"text","text":"("},{"text":"startingAt","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Scout4PathV","text":"Path"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"filter"},{"kind":"text","text":": "},{"text":"PathsFilter","kind":"typeIdentifier","preciseIdentifier":"s:5Scout11PathsFilterO"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:5Scout4PathV","text":"Path"},{"kind":"text","text":"]"}],"defaultImplementations":1},"doc://Scout/documentation/Scout/PathsFilter/ExpressionPredicate":{"title":"PathsFilter.ExpressionPredicate","role":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/ExpressionPredicate","abstract":[{"type":"text","text":"Specify a "},{"type":"codeVoice","code":"String"},{"text":" boolean expression to filter the value","type":"text"}],"url":"\/documentation\/scout\/pathsfilter\/expressionpredicate","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressionPredicate"}],"navigatorTitle":[{"text":"ExpressionPredicate","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://Scout/documentation/Scout/PathExplorer":{"title":"PathExplorer","kind":"symbol","abstract":[{"type":"text","text":"Wrap several structs to explore several format: Json, Plist, YAML and Xml"}],"type":"topic","url":"\/documentation\/scout\/pathexplorer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PathExplorer"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathExplorer","kind":"identifier"}]},"doc://Scout/documentation/Scout/PathsFilter/key(pattern:target:)":{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter\/key(pattern:target:)","title":"key(pattern:target:)","abstract":[{"text":"Key filter with a pattern for the regular expression.","type":"text"}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"key","kind":"identifier"},{"text":"(","kind":"text"},{"text":"pattern","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"text":"target","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"PathsFilter","kind":"typeIdentifier","preciseIdentifier":"s:5Scout11PathsFilterO"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Scout11PathsFilterO11ValueTargetO","text":"ValueTarget"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:5Scout11PathsFilterO","text":"PathsFilter"}],"type":"topic","url":"\/documentation\/scout\/pathsfilter\/key(pattern:target:)","kind":"symbol","role":"symbol"},"doc://Scout/documentation/Scout/PathExplorer/listPaths(startingAt:)":{"role":"symbol","title":"listPaths(startingAt:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"listPaths","kind":"identifier"},{"kind":"text","text":"("},{"text":"startingAt","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:5Scout4PathV","kind":"typeIdentifier","text":"Path"},{"text":"?) ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> ["},{"preciseIdentifier":"s:5Scout4PathV","text":"Path","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:)","kind":"symbol","url":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:)","abstract":[{"text":"Returns all the paths leading to single or group values","type":"text"}]}}}