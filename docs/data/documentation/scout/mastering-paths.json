{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Basically, a "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" is a collection of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"type":"text","text":"s in a specific order. The sequence of "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":"s lets the explorer know what value to target next. When navigating to a value is not possible, the explorer will throw an error."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples in this article will refer to this json file, stored in a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json"},{"type":"text","text":" value referred to as "},{"type":"codeVoice","code":"json"},{"type":"text","text":"."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The full “People” files are used to try Scout and can be found in the Playground folder."}]}]},{"type":"codeListing","syntax":"json","code":["{","  \"Tom\" : {","    \"age\" : 68,","    \"hobbies\" : [","      \"cooking\",","      \"guitar\"","    ],","    \"height\" : 175","  },","  \"Robert\" : {","    \"age\" : 23,","    \"hobbies\" : [","      \"video games\",","      \"party\",","      \"tennis\"","    ],","    \"running_records\" : [","      [","        10,","        12,","        9,","        10","      ],","      [","        9,","        12,","        11","      ]","    ],","    \"height\" : 181","  },","  \"Suzanne\" : {","    \"job\" : \"actress\",","    \"movies\" : [","      {","        \"title\" : \"Tomorrow is so far\",","        \"awards\" : \"Best speech for a silent movie\"","      },","      {","        \"title\" : \"Yesterday will never go\",","        \"awards\" : \"Best title\"","      },","      {","        \"title\" : \"What about today?\"","      }","    ]","  }","}"]},{"anchor":"Basics","level":2,"type":"heading","text":"Basics"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":"s are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/key(_:)"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/index(_:)"},{"type":"text","text":". As their name suggest, they are used to target a key in a dictionary or an index in an array."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" can be instantiated from "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":"s in an array or as variadic parameters. Then the path can be provided to the "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" to read or modify a value. Here are some examples with variadic parameters."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make a "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" targeting Robert’s second hobby"}]}]}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Robert\", \"hobbies\", 1)","let secondHobby = try json.get(path: path).string","print(secondHobby)","\/\/ \"party\""]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" functions always offer convenience versions to use "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":" directly. This is useful to avoid creating a "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" when it does not already exist or when having a more “scripting” approach."}]}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make a "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" targeting Suzanne’s first movie title"}]}]}]},{"type":"codeListing","syntax":"swift","code":["Path(elements: \"Suzanne\", \"movies\", 0, \"title\")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With indexes, it’s possible to use negative numbers to target indexes "},{"type":"emphasis","inlineContent":[{"type":"text","text":"from the end"}]},{"type":"text","text":" of the array."},{"type":"text","text":" "},{"type":"text","text":"For instance to target Suzanne’s last movie:"}]},{"type":"codeListing","syntax":"swift","code":["Path(elements: \"Suzanne\", \"movies\", -1)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following "},{"type":"codeVoice","code":"ducks"},{"type":"text","text":" array shows how negative indexes are handled with "},{"type":"codeVoice","code":"PathElement.index"}]},{"type":"codeListing","syntax":null,"code":["[\"Riri\", \"Fifi\", \"Loulou\", \"Donald\", \"Daisy\"]","[  0   ,   1   ,    2    ,    3    ,    4   ] (Positive)","[ -5   ,  -4   ,   -3    ,   -2    ,   -1   ] (Negative)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ducks[1]"},{"type":"text","text":" targets “Fifi”"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ducks[-2"},{"type":"text","text":"] targets “Donald”"}]}]}]},{"anchor":"Group-informations","level":2,"type":"heading","text":"Group informations"},{"anchor":"Count","level":3,"type":"heading","text":"Count"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Scout offers to get a dictionary or array count with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/count"},{"type":"text","text":". This element has to be placed when the value is an array or dictionary. The returned "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" will be a int single value."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, to get Robert’s hobbies count."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Robert\", \"hobbies\", .count)","let count = try json.get(path: path).int","print(count) \/\/ 3"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, to read the keys count in the overall dictionary, the following Path can be used."}]},{"type":"codeListing","syntax":"swift","code":["Path(elements: .count)"]},{"anchor":"List-keys","level":3,"type":"heading","text":"List keys"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another useful feature is to list all the keys in a dictionary. To do so, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/keysList"},{"type":"text","text":" can be used."},{"type":"text","text":" "},{"type":"text","text":"For instance, to list Tom’s keys:"}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Tom\", .keysList)","let tomKeys = try json.get(path: path).array(of: String.self)","print(tomKeys)","\/\/ [\"age\", \"hobbies\", \"height\"]"]},{"anchor":"Scope-groups","level":2,"type":"heading","text":"Scope groups"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When working with arrays and dictionaries, it might be useful to be able to target a specific part in the values. For instance to exclude the first and last value in an array, or to target only keys starting with a certain prefix in a dictionary."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Those features are available with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/slice(_:)"},{"type":"text","text":" to slice an array and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/filter(_:)"},{"type":"text","text":" to filter keys in a dictionary."}]},{"anchor":"Slice-arrays","level":3,"type":"heading","text":"Slice arrays"},{"type":"paragraph","inlineContent":[{"type":"text","text":"With "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/slice(_:)"},{"type":"text","text":", it’s possible to target a contiguous part of an array. For instance to get Robert’s first two hobbies."}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When represented as a "},{"type":"codeVoice","code":"String"},{"type":"text","text":", the slice element is specified as two integers separated by a double point and enclosed by squared brackets like "},{"type":"codeVoice","code":"[0:2]"},{"type":"text","text":" or "},{"type":"codeVoice","code":"[2:-4]"},{"type":"text","text":". When the left value is the first index, it is omitted. The same goes for the right value when it’s the last valid index."}]}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Robert\", \"hobbies\", .slice(0, 1))","let robertFirstTwoHobbies = try json.get(path: path).array(of: String.self)","print(robertFirstTwoHobbies) \/\/ [\"video games\", \"party\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/index(_:)"},{"type":"text","text":", it’s possible to use negative indexes. Here to get Suzanne last two movies’ titles."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Suzanne\", \"movies\", .slice(-2, -1), \"title\")","let titles = try json.get(path: path).array(of: String.self)","print(titles)","\/\/ [\"Yesterday will never go\", \"What about today?\"]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following "},{"type":"codeVoice","code":"ducks"},{"type":"text","text":" array explains how positive and negative indexes are interpreted with "},{"type":"codeVoice","code":"PathElement.slice"}]},{"type":"codeListing","syntax":null,"code":["[\"Riri\", \"Fifi\", \"Loulou\", \"Donald\", \"Daisy\"]","[  0   ,   1   ,    2    ,    3    ,    4   ] (Positive)","[ -5   ,  -4   ,   -3    ,   -2    ,   -1   ] (Negative)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ducks[0:2]"},{"type":"text","text":" targets "},{"type":"codeVoice","code":"[\"Riri\", \"Fifi\", \"Loulou\"]"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ducks[2:-2]"},{"type":"text","text":" targets "},{"type":"codeVoice","code":"[\"Loulou\", \"Donald\"]"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ducks[-3:-1]"},{"type":"text","text":" targets "},{"type":"codeVoice","code":"[\"Loulou\", \"Donald\", \"Daisy\"]"}]}]}]},{"anchor":"Filter-dictionaries","level":3,"type":"heading","text":"Filter dictionaries"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/filter(_:)"},{"type":"text","text":" lets you provide a regular expression to match certain keys in a dictionary. All the keys that do not fully match the expression will be filtered."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, to get all keys in Tom’s dictionary that start with “h”."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Tom\", .filter(\"h.*\"))","let filteredTom = try json.get(path: path)","print(filteredTom)"]},{"type":"codeListing","syntax":"json","code":["{","  \"hobbies\" : [","    \"cooking\",","    \"guitar\"","  ],","  \"height\" : 175","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or to get Tom and Robert first hobby."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: .filter(\"Tom|Robert\"), \"hobbies\", 0)","let firstHobbies = try json.get(path: path).dictionary(of: String.self)","print(firstHobbies)","\/\/ [\"Tom\": \"cooking\", \"Robert\": \"video games\"]"]},{"anchor":"Mixing-up","level":3,"type":"heading","text":"Mixing up"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to mix both array slicing and dictionary filtering in a same path. For instance to get Tom and Robert first two hobbies."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: .filter(\"Tom|Robert\"), \"hobbies\", .slide(.first, 1)) ","let hobbies = try json.get(path: path)","print(hobbies)"]},{"type":"codeListing","syntax":"json","code":["{","  \"Tom\" : [","    \"cooking\",","    \"guitar\"","  ],","  \"Robert\" : [","    \"video games\",","    \"party\"","  ]","}"]},{"anchor":"Literals-and-PathElementRepresentable","level":2,"type":"heading","text":"Literals and PathElementRepresentable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using plain strings and numbers is made possible because "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"type":"text","text":" implements "},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExpressibleByIntLiteral"},{"type":"text","text":". But when it comes to use variables as "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":", it is required to specify the element."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance with the first example path to target Robert’s second hobby."}]},{"type":"codeListing","syntax":"swift","code":["let robertKey = \"Robert\"","let hobbiesKey = \"hobbies\"","let hobbyIndex = 1","let path = Path(elements: .key(robertKey), .key(hobbiesKey), .index(hobbyIndex))"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As this syntax might be a bit heavy, it’s possible to use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable"},{"type":"text","text":" to create the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" with  "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path\/init(_:)-1b2iy"},{"type":"text","text":". With it, the code above can be rewritten like so."}]},{"type":"codeListing","syntax":"swift","code":["let robertKey = \"Robert\"","let hobbiesKey = \"hobbies\"","let hobbyIndex = 1","let path = Path(robertKey, hobbiesKey, hobbyIndex)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The drawback is that this is possible only for "},{"type":"codeVoice","code":"PathElement.index"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PathElement.key"},{"type":"text","text":". When dealing with other elements like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/count"},{"type":"text","text":", it is required to specify the "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":" type."}]},{"type":"codeListing","syntax":"swift","code":["Path(robertKey, hobbiesKey, PathElement.count)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The convenience overloads for the "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" functions similarly works with "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PathElementRepresentable"},{"type":"text","text":"."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/scout\/mastering-paths"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Scout\/documentation\/Scout\/mastering-paths","interfaceLanguage":"swift"},"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path"},{"type":"text","text":"s are provided to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"},{"type":"text","text":" to navigate through or manipulate data precisely."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Mastering Paths","role":"article","modules":[{"name":"Scout"}]},"hierarchy":{"paths":[["doc:\/\/Scout\/documentation\/Scout"]]},"seeAlsoSections":[{"title":"Manipulate paths","identifiers":["doc:\/\/Scout\/documentation\/Scout\/paths-listing","doc:\/\/Scout\/documentation\/Scout\/Path","doc:\/\/Scout\/documentation\/Scout\/PathElement","doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","doc:\/\/Scout\/documentation\/Scout\/PathsFilter","doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","doc:\/\/Scout\/documentation\/Scout\/Bounds"],"generated":true}],"references":{"doc://Scout/documentation/Scout/Bounds":{"role":"symbol","title":"Bounds","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Bounds"}],"abstract":[{"type":"text","text":"Lower and upper bounds to be used to slice an array"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/Bounds","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Bounds"}],"url":"\/documentation\/scout\/bounds"},"doc://Scout/documentation/Scout/PathElement/key(_:)":{"role":"symbol","title":"PathElement.key(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"key"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/key(_:)","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathelement\/key(_:)"},"doc://Scout/documentation/Scout/PathExplorers/Json":{"role":"symbol","title":"PathExplorers.Json","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Json"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Json"}],"url":"\/documentation\/scout\/pathexplorers\/json"},"doc://Scout/documentation/Scout/PathElement/index(_:)":{"role":"symbol","title":"PathElement.index(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"index"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/index(_:)","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathelement\/index(_:)"},"doc://Scout/documentation/Scout/PathElement/count":{"role":"symbol","title":"PathElement.count","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"count"}],"abstract":[{"type":"text","text":"Placed after an array or dictionary to return its count"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/count","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathelement\/count"},"doc://Scout/documentation/Scout/PathElementRepresentable":{"role":"symbol","title":"PathElementRepresentable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathElementRepresentable"}],"abstract":[{"type":"text","text":"Protocol to allow to subscript a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" without using directly the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"type":"text","text":" enum."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathElementRepresentable"}],"url":"\/documentation\/scout\/pathelementrepresentable"},"doc://Scout/documentation/Scout/PathExplorer":{"role":"symbol","title":"PathExplorer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathExplorer"}],"abstract":[{"type":"text","text":"Wrap several structs to explore several format: Json, Plist, YAML and Xml"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathExplorer"}],"url":"\/documentation\/scout\/pathexplorer"},"doc://Scout/documentation/Scout/PathExplorer/listPaths(startingAt:filter:)-4tkeq":{"defaultImplementations":1,"role":"symbol","title":"listPaths(startingAt:filter:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"listPaths"},{"kind":"text","text":"("},{"kind":"externalParam","text":"startingAt"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Path","preciseIdentifier":"s:5Scout4PathV"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"filter"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"PathsFilter","preciseIdentifier":"s:5Scout11PathsFilterO"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"Path","preciseIdentifier":"s:5Scout4PathV"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"Returns all the paths leading to single or group values"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-4tkeq"},"doc://Scout/documentation/Scout/Path/init(_:)-1b2iy":{"role":"symbol","title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"PathElementRepresentable","preciseIdentifier":"s:5Scout24PathElementRepresentableP"},{"kind":"text","text":"...)"}],"abstract":[{"type":"text","text":"Instantiate a path from "},{"type":"codeVoice","code":"PathElementRepresentable"},{"type":"text","text":"s"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path\/init(_:)-1b2iy","kind":"symbol","type":"topic","url":"\/documentation\/scout\/path\/init(_:)-1b2iy"},"doc://Scout/documentation/Scout/Path":{"role":"symbol","title":"Path","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Path"}],"abstract":[{"type":"text","text":"Collection of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"type":"text","text":"s to subscript a "},{"type":"codeVoice","code":"PathExplorer"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Path"}],"url":"\/documentation\/scout\/path"},"doc://Scout/documentation/Scout/PathsFilter":{"role":"symbol","title":"PathsFilter","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathsFilter"}],"abstract":[{"type":"text","text":"Provided to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq"},{"type":"text","text":" function to target specific paths when listing them."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathsFilter"}],"url":"\/documentation\/scout\/pathsfilter"},"doc://Scout/documentation/Scout/PathElement/filter(_:)":{"role":"symbol","title":"PathElement.filter(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"filter"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Regular expression pattern placed after a dictionary to filter the keys"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/filter(_:)","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathelement\/filter(_:)"},"doc://Scout/documentation/Scout/PathElement/keysList":{"role":"symbol","title":"PathElement.keysList","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"keysList"}],"abstract":[{"type":"text","text":"Placed after a dictionary to returns its keys as an array"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/keysList","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathelement\/keyslist"},"doc://Scout/documentation/Scout/PathElement":{"role":"symbol","title":"PathElement","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathElement"}],"abstract":[{"type":"text","text":"The possible elements that can be used to subscript a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathElement"}],"url":"\/documentation\/scout\/pathelement"},"doc://Scout/documentation/Scout/PathElement/slice(_:)":{"role":"symbol","title":"PathElement.slice(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"slice"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Bounds","preciseIdentifier":"s:5Scout6BoundsV"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Placed after an array to slice it with a "},{"type":"codeVoice","code":"Bounds"},{"type":"text","text":" value"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/slice(_:)","kind":"symbol","type":"topic","url":"\/documentation\/scout\/pathelement\/slice(_:)"},"doc://Scout/documentation/Scout/paths-listing":{"role":"article","title":"Paths listing","abstract":[{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" list path features is useful to get all paths leading to a value or a key."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/paths-listing","kind":"article","type":"topic","url":"\/documentation\/scout\/paths-listing"},"doc://Scout/documentation/Scout":{"role":"collection","title":"Scout","abstract":[{"type":"text","text":"This library aims to make specific formats data values reading and writing simple when the data format is not known at build time."}],"identifier":"doc:\/\/Scout\/documentation\/Scout","kind":"symbol","type":"topic","url":"\/documentation\/scout"},"doc://Scout/documentation/Scout/ValuePredicate":{"role":"symbol","title":"ValuePredicate","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValuePredicate"}],"abstract":[{"type":"text","text":"Expression or function to evaluate a value"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValuePredicate"}],"url":"\/documentation\/scout\/valuepredicate"}}}