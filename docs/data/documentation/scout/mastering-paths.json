{"seeAlsoSections":[{"title":"Manipulate paths","identifiers":["doc:\/\/Scout\/documentation\/Scout\/paths-listing","doc:\/\/Scout\/documentation\/Scout\/Path","doc:\/\/Scout\/documentation\/Scout\/PathElement","doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","doc:\/\/Scout\/documentation\/Scout\/PathsFilter","doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","doc:\/\/Scout\/documentation\/Scout\/Bounds"],"generated":true}],"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/scout\/mastering-paths"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Scout\/documentation\/Scout\/mastering-paths"},"abstract":[{"identifier":"doc:\/\/Scout\/documentation\/Scout\/Path","type":"reference","isActive":true},{"type":"text","text":"s are provided to a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"},{"type":"text","text":" to navigate through or manipulate data precisely."}],"hierarchy":{"paths":[["doc:\/\/Scout\/documentation\/Scout"]]},"metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Scout"}],"title":"Mastering Paths"},"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Basically, a "},{"code":"Path","type":"codeVoice"},{"text":" is a collection of ","type":"text"},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","type":"reference","isActive":true},{"type":"text","text":"s in a specific order. The sequence of "},{"type":"codeVoice","code":"PathElement"},{"text":"s lets the explorer know what value to target next. When navigating to a value is not possible, the explorer will throw an error.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples in this article will refer to this json file, stored in a "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json","type":"reference","isActive":true},{"type":"text","text":" value referred to as "},{"type":"codeVoice","code":"json"},{"text":".","type":"text"}]},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The full “People” files are used to try Scout and can be found in the Playground folder.","type":"text"}]}],"style":"note"},{"syntax":"json","code":["{","  \"Tom\" : {","    \"age\" : 68,","    \"hobbies\" : [","      \"cooking\",","      \"guitar\"","    ],","    \"height\" : 175","  },","  \"Robert\" : {","    \"age\" : 23,","    \"hobbies\" : [","      \"video games\",","      \"party\",","      \"tennis\"","    ],","    \"running_records\" : [","      [","        10,","        12,","        9,","        10","      ],","      [","        9,","        12,","        11","      ]","    ],","    \"height\" : 181","  },","  \"Suzanne\" : {","    \"job\" : \"actress\",","    \"movies\" : [","      {","        \"title\" : \"Tomorrow is so far\",","        \"awards\" : \"Best speech for a silent movie\"","      },","      {","        \"title\" : \"Yesterday will never go\",","        \"awards\" : \"Best title\"","      },","      {","        \"title\" : \"What about today?\"","      }","    ]","  }","}"],"type":"codeListing"},{"text":"Basics","level":2,"type":"heading","anchor":"Basics"},{"type":"paragraph","inlineContent":[{"text":"The simplest ","type":"text"},{"type":"codeVoice","code":"PathElement"},{"text":"s are ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/key(_:)"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/index(_:)","isActive":true},{"text":". As their name suggest, they are used to target a key in a dictionary or an index in an array.","type":"text"}]},{"inlineContent":[{"type":"text","text":"A "},{"code":"Path","type":"codeVoice"},{"text":" can be instantiated from ","type":"text"},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":"s in an array or as variadic parameters. Then the path can be provided to the "},{"code":"PathExplorer","type":"codeVoice"},{"text":" to read or modify a value. Here are some examples with variadic parameters.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Make a "},{"type":"codeVoice","code":"Path"},{"text":" targeting Robert’s second hobby","type":"text"}]}]}],"type":"unorderedList"},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Robert\", \"hobbies\", 1)","let secondHobby = try json.get(path: path).string","print(secondHobby)","\/\/ \"party\""]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" functions always offer convenience versions to use "},{"code":"PathElement","type":"codeVoice"},{"type":"text","text":" directly. This is useful to avoid creating a "},{"code":"Path","type":"codeVoice"},{"text":" when it does not already exist or when having a more “scripting” approach.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Make a ","type":"text"},{"type":"codeVoice","code":"Path"},{"text":" targeting Suzanne’s first movie title","type":"text"}]}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["Path(elements: \"Suzanne\", \"movies\", 0, \"title\")"]},{"type":"paragraph","inlineContent":[{"text":"With indexes, it’s possible to use negative numbers to target indexes ","type":"text"},{"inlineContent":[{"text":"from the end","type":"text"}],"type":"emphasis"},{"type":"text","text":" of the array."},{"text":" ","type":"text"},{"type":"text","text":"For instance to target Suzanne’s last movie:"}]},{"syntax":"swift","type":"codeListing","code":["Path(elements: \"Suzanne\", \"movies\", -1)"]},{"type":"paragraph","inlineContent":[{"text":"The following ","type":"text"},{"type":"codeVoice","code":"ducks"},{"text":" array shows how negative indexes are handled with ","type":"text"},{"code":"PathElement.index","type":"codeVoice"}]},{"syntax":null,"type":"codeListing","code":["[\"Riri\", \"Fifi\", \"Loulou\", \"Donald\", \"Daisy\"]","[  0   ,   1   ,    2    ,    3    ,    4   ] (Positive)","[ -5   ,  -4   ,   -3    ,   -2    ,   -1   ] (Negative)"]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"ducks[1]"},{"text":" targets “Fifi”","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ducks[-2"},{"type":"text","text":"] targets “Donald”"}]}]}]},{"text":"Group informations","type":"heading","level":2,"anchor":"Group-informations"},{"anchor":"Count","type":"heading","level":3,"text":"Count"},{"inlineContent":[{"type":"text","text":"Scout offers to get a dictionary or array count with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/count"},{"type":"text","text":". This element has to be placed when the value is an array or dictionary. The returned "},{"type":"codeVoice","code":"PathExplorer"},{"text":" will be a int single value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, to get Robert’s hobbies count."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Robert\", \"hobbies\", .count)","let count = try json.get(path: path).int","print(count) \/\/ 3"]},{"type":"paragraph","inlineContent":[{"text":"Similarly, to read the keys count in the overall dictionary, the following Path can be used.","type":"text"}]},{"syntax":"swift","code":["Path(elements: .count)"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"List-keys","text":"List keys"},{"type":"paragraph","inlineContent":[{"text":"Another useful feature is to list all the keys in a dictionary. To do so, the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/keysList"},{"text":" can be used.","type":"text"},{"text":" ","type":"text"},{"text":"For instance, to list Tom’s keys:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Tom\", .keysList)","let tomKeys = try json.get(path: path).array(of: String.self)","print(tomKeys)","\/\/ [\"age\", \"hobbies\", \"height\"]"]},{"type":"heading","text":"Scope groups","level":2,"anchor":"Scope-groups"},{"type":"paragraph","inlineContent":[{"text":"When working with arrays and dictionaries, it might be useful to be able to target a specific part in the values. For instance to exclude the first and last value in an array, or to target only keys starting with a certain prefix in a dictionary.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Those features are available with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/slice(_:)"},{"text":" to slice an array and ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/filter(_:)"},{"text":" to filter keys in a dictionary.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Slice-arrays","text":"Slice arrays"},{"inlineContent":[{"text":"With ","type":"text"},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/slice(_:)","type":"reference","isActive":true},{"text":", it’s possible to target a contiguous part of an array. For instance to get Robert’s first two hobbies.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"When represented as a "},{"code":"String","type":"codeVoice"},{"type":"text","text":", the slice element is specified as two integers separated by a double point and enclosed by squared brackets like "},{"type":"codeVoice","code":"[0:2]"},{"type":"text","text":" or "},{"code":"[2:-4]","type":"codeVoice"},{"type":"text","text":". When the left value is the first index, it is omitted. The same goes for the right value when it’s the last valid index."}],"type":"paragraph"}],"style":"note"},{"syntax":"swift","type":"codeListing","code":["let path = Path(elements: \"Robert\", \"hobbies\", .slice(0, 1))","let robertFirstTwoHobbies = try json.get(path: path).array(of: String.self)","print(robertFirstTwoHobbies) \/\/ [\"video games\", \"party\"]"]},{"inlineContent":[{"type":"text","text":"Similarly with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/index(_:)"},{"text":", it’s possible to use negative indexes. Here to get Suzanne last two movies’ titles.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["let path = Path(elements: \"Suzanne\", \"movies\", .slice(-2, -1), \"title\")","let titles = try json.get(path: path).array(of: String.self)","print(titles)","\/\/ [\"Yesterday will never go\", \"What about today?\"]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The following ","type":"text"},{"code":"ducks","type":"codeVoice"},{"type":"text","text":" array explains how positive and negative indexes are interpreted with "},{"type":"codeVoice","code":"PathElement.slice"}]},{"type":"codeListing","syntax":null,"code":["[\"Riri\", \"Fifi\", \"Loulou\", \"Donald\", \"Daisy\"]","[  0   ,   1   ,    2    ,    3    ,    4   ] (Positive)","[ -5   ,  -4   ,   -3    ,   -2    ,   -1   ] (Negative)"]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ducks[0:2]"},{"text":" targets ","type":"text"},{"code":"[\"Riri\", \"Fifi\", \"Loulou\"]","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"ducks[2:-2]","type":"codeVoice"},{"type":"text","text":" targets "},{"type":"codeVoice","code":"[\"Loulou\", \"Donald\"]"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"ducks[-3:-1]","type":"codeVoice"},{"type":"text","text":" targets "},{"code":"[\"Loulou\", \"Donald\", \"Daisy\"]","type":"codeVoice"}],"type":"paragraph"}]}]},{"level":3,"text":"Filter dictionaries","anchor":"Filter-dictionaries","type":"heading"},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/filter(_:)","isActive":true},{"type":"text","text":" lets you provide a regular expression to match certain keys in a dictionary. All the keys that do not fully match the expression will be filtered."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, to get all keys in Tom’s dictionary that start with “h”."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: \"Tom\", .filter(\"h.*\"))","let filteredTom = try json.get(path: path)","print(filteredTom)"]},{"type":"codeListing","syntax":"json","code":["{","  \"hobbies\" : [","    \"cooking\",","    \"guitar\"","  ],","  \"height\" : 175","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Or to get Tom and Robert first hobby."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: .filter(\"Tom|Robert\"), \"hobbies\", 0)","let firstHobbies = try json.get(path: path).dictionary(of: String.self)","print(firstHobbies)","\/\/ [\"Tom\": \"cooking\", \"Robert\": \"video games\"]"]},{"level":3,"type":"heading","anchor":"Mixing-up","text":"Mixing up"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to mix both array slicing and dictionary filtering in a same path. For instance to get Tom and Robert first two hobbies."}]},{"type":"codeListing","syntax":"swift","code":["let path = Path(elements: .filter(\"Tom|Robert\"), \"hobbies\", .slide(.first, 1)) ","let hobbies = try json.get(path: path)","print(hobbies)"]},{"type":"codeListing","code":["{","  \"Tom\" : [","    \"cooking\",","    \"guitar\"","  ],","  \"Robert\" : [","    \"video games\",","    \"party\"","  ]","}"],"syntax":"json"},{"anchor":"Literals-and-PathElementRepresentable","type":"heading","level":2,"text":"Literals and PathElementRepresentable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using plain strings and numbers is made possible because "},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","isActive":true},{"type":"text","text":" implements "},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExpressibleByIntLiteral"},{"type":"text","text":". But when it comes to use variables as "},{"code":"PathElement","type":"codeVoice"},{"type":"text","text":", it is required to specify the element."}]},{"type":"paragraph","inlineContent":[{"text":"For instance with the first example path to target Robert’s second hobby.","type":"text"}]},{"code":["let robertKey = \"Robert\"","let hobbiesKey = \"hobbies\"","let hobbyIndex = 1","let path = Path(elements: .key(robertKey), .key(hobbiesKey), .index(hobbyIndex))"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"As this syntax might be a bit heavy, it’s possible to use ","type":"text"},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","isActive":true,"type":"reference"},{"text":" to create the ","type":"text"},{"type":"codeVoice","code":"Path"},{"type":"text","text":" with  "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/Path\/init(_:)-1b2iy"},{"type":"text","text":". With it, the code above can be rewritten like so."}]},{"code":["let robertKey = \"Robert\"","let hobbiesKey = \"hobbies\"","let hobbyIndex = 1","let path = Path(robertKey, hobbiesKey, hobbyIndex)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The drawback is that this is possible only for "},{"type":"codeVoice","code":"PathElement.index"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PathElement.key"},{"type":"text","text":". When dealing with other elements like "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/count"},{"type":"text","text":", it is required to specify the "},{"type":"codeVoice","code":"PathElement"},{"text":" type.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["Path(robertKey, hobbiesKey, PathElement.count)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The convenience overloads for the "},{"code":"PathExplorer","type":"codeVoice"},{"type":"text","text":" functions similarly works with "},{"type":"codeVoice","code":"PathElement"},{"type":"text","text":" and "},{"type":"codeVoice","code":"PathElementRepresentable"},{"type":"text","text":"."}]}],"kind":"content"}],"kind":"article","sections":[],"references":{"doc://Scout/documentation/Scout/PathElementRepresentable":{"abstract":[{"text":"Protocol to allow to subscript a ","type":"text"},{"type":"codeVoice","code":"PathExplorer"},{"text":" without using directly the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement"},{"text":" enum.","type":"text"}],"type":"topic","url":"\/documentation\/scout\/pathelementrepresentable","role":"symbol","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElementRepresentable","title":"PathElementRepresentable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PathElementRepresentable"}],"navigatorTitle":[{"text":"PathElementRepresentable","kind":"identifier"}]},"doc://Scout/documentation/Scout/PathElement/filter(_:)":{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/filter(_:)","abstract":[{"type":"text","text":"Regular expression pattern placed after a dictionary to filter the keys"}],"role":"symbol","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"filter","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":")","kind":"text"}],"url":"\/documentation\/scout\/pathelement\/filter(_:)","title":"PathElement.filter(_:)","type":"topic"},"doc://Scout/documentation/Scout/paths-listing":{"type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/paths-listing","url":"\/documentation\/scout\/paths-listing","role":"article","kind":"article","title":"Paths listing","abstract":[{"code":"PathExplorer","type":"codeVoice"},{"text":" list path features is useful to get all paths leading to a value or a key.","type":"text"}]},"doc://Scout/documentation/Scout":{"abstract":[{"type":"text","text":"This library aims to make specific formats data values reading and writing simple when the data format is not known at build time."}],"identifier":"doc:\/\/Scout\/documentation\/Scout","url":"\/documentation\/scout","type":"topic","role":"collection","title":"Scout","kind":"symbol"},"doc://Scout/documentation/Scout/PathExplorer/listPaths(startingAt:filter:)-4tkeq":{"abstract":[{"text":"Returns all the paths leading to single or group values","type":"text"}],"type":"topic","url":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-4tkeq","role":"symbol","kind":"symbol","required":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq","title":"listPaths(startingAt:filter:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"listPaths","kind":"identifier"},{"kind":"text","text":"("},{"text":"startingAt","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:5Scout4PathV","text":"Path"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"filter"},{"kind":"text","text":": "},{"text":"PathsFilter","kind":"typeIdentifier","preciseIdentifier":"s:5Scout11PathsFilterO"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","preciseIdentifier":"s:5Scout4PathV","text":"Path"},{"kind":"text","text":"]"}],"defaultImplementations":1},"doc://Scout/documentation/Scout/PathElement/key(_:)":{"title":"PathElement.key(_:)","role":"symbol","url":"\/documentation\/scout\/pathelement\/key(_:)","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/key(_:)","kind":"symbol","abstract":[],"type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"key"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"kind":"text","text":")"}]},"doc://Scout/documentation/Scout/PathExplorer":{"title":"PathExplorer","kind":"symbol","abstract":[{"type":"text","text":"Wrap several structs to explore several format: Json, Plist, YAML and Xml"}],"type":"topic","url":"\/documentation\/scout\/pathexplorer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PathExplorer"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathExplorer","kind":"identifier"}]},"doc://Scout/documentation/Scout/Bounds":{"abstract":[{"type":"text","text":"Lower and upper bounds to be used to slice an array"}],"type":"topic","url":"\/documentation\/scout\/bounds","role":"symbol","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/Bounds","title":"Bounds","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Bounds"}],"navigatorTitle":[{"kind":"identifier","text":"Bounds"}]},"doc://Scout/documentation/Scout/PathElement/index(_:)":{"title":"PathElement.index(_:)","role":"symbol","url":"\/documentation\/scout\/pathelement\/index(_:)","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/index(_:)","kind":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"case"},{"text":" ","kind":"text"},{"text":"index","kind":"identifier"},{"kind":"text","text":"("},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}]},"doc://Scout/documentation/Scout/PathExplorers/Json":{"title":"PathExplorers.Json","role":"symbol","url":"\/documentation\/scout\/pathexplorers\/json","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json","navigatorTitle":[{"text":"Json","kind":"identifier"}],"kind":"symbol","abstract":[],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Json"}]},"doc://Scout/documentation/Scout/PathElement":{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","url":"\/documentation\/scout\/pathelement","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathElement","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"PathElement","kind":"identifier"}],"title":"PathElement","abstract":[{"type":"text","text":"The possible elements that can be used to subscript a "},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","isActive":true}],"kind":"symbol","role":"symbol"},"doc://Scout/documentation/Scout/PathElement/slice(_:)":{"abstract":[{"text":"Placed after an array to slice it with a ","type":"text"},{"code":"Bounds","type":"codeVoice"},{"text":" value","type":"text"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"slice","kind":"identifier"},{"kind":"text","text":"("},{"text":"Bounds","kind":"typeIdentifier","preciseIdentifier":"s:5Scout6BoundsV"},{"kind":"text","text":")"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/slice(_:)","url":"\/documentation\/scout\/pathelement\/slice(_:)","title":"PathElement.slice(_:)","role":"symbol"},"doc://Scout/documentation/Scout/Path":{"navigatorTitle":[{"text":"Path","kind":"identifier"}],"abstract":[{"type":"text","text":"Collection of "},{"isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement","type":"reference"},{"type":"text","text":"s to subscript a "},{"type":"codeVoice","code":"PathExplorer"}],"type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/Path","kind":"symbol","title":"Path","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Path"}],"url":"\/documentation\/scout\/path","role":"symbol"},"doc://Scout/documentation/Scout/ValuePredicate":{"abstract":[{"text":"Expression or function to evaluate a value","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ValuePredicate"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ValuePredicate"}],"title":"ValuePredicate","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/ValuePredicate","url":"\/documentation\/scout\/valuepredicate","role":"symbol"},"doc://Scout/documentation/Scout/PathElement/keysList":{"title":"PathElement.keysList","role":"symbol","url":"\/documentation\/scout\/pathelement\/keyslist","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/keysList","kind":"symbol","abstract":[{"type":"text","text":"Placed after a dictionary to returns its keys as an array"}],"type":"topic","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"keysList","kind":"identifier"}]},"doc://Scout/documentation/Scout/PathsFilter":{"type":"topic","url":"\/documentation\/scout\/pathsfilter","abstract":[{"text":"Provided to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/listPaths(startingAt:filter:)-4tkeq","isActive":true},{"type":"text","text":" function to target specific paths when listing them."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathsFilter","title":"PathsFilter","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"PathsFilter","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PathsFilter"}]},"doc://Scout/documentation/Scout/PathElement/count":{"url":"\/documentation\/scout\/pathelement\/count","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"count","kind":"identifier"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathElement\/count","abstract":[{"text":"Placed after an array or dictionary to return its count","type":"text"}],"title":"PathElement.count","kind":"symbol","role":"symbol","type":"topic"},"doc://Scout/documentation/Scout/Path/init(_:)-1b2iy":{"title":"init(_:)","role":"symbol","url":"\/documentation\/scout\/path\/init(_:)-1b2iy","identifier":"doc:\/\/Scout\/documentation\/Scout\/Path\/init(_:)-1b2iy","kind":"symbol","abstract":[{"type":"text","text":"Instantiate a path from "},{"code":"PathElementRepresentable","type":"codeVoice"},{"text":"s","type":"text"}],"type":"topic","fragments":[{"kind":"identifier","text":"init"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:5Scout24PathElementRepresentableP","kind":"typeIdentifier","text":"PathElementRepresentable"},{"text":"...)","kind":"text"}]}}}