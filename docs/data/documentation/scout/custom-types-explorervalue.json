{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Meet-ExplorerValue","level":2,"type":"heading","text":"Meet ExplorerValue"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" is a type implementing the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"},{"type":"text","text":" protocol. As it implements "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" too, it can be used as a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" as long as a coder exists for the data format. Thus, JSON, Plist and YAML "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":"s can use the "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" type to get simple conformance to the protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s why "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/CodablePathExplorer"},{"type":"text","text":" is mainly a wrapper around "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" to provide a generic structure implementing "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":". "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Plist"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Yaml"},{"type":"text","text":" are simply type aliases for "},{"type":"codeVoice","code":"CodablePathExplorer"},{"type":"text","text":", and differs only by the generic type "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/CodableFormat"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":", it’s possible to provide a custom "},{"type":"codeVoice","code":"Encoder"},{"type":"text","text":" or "},{"type":"codeVoice","code":"Decoder"},{"type":"text","text":" rather than using the default ones coming with the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers"},{"type":"text","text":" namespace. This allows to specify date coding strategies for example, or to support new data formats in a blink of an eye with a dedicated Encoder\/Decoder."}]},{"anchor":"ExplorerValueCreatable","level":2,"type":"heading","text":"ExplorerValueCreatable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To take things further, it’s also possible to convert any type to an "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueRepresentable"},{"type":"text","text":". This protocol’s only requirement is a function that returns an "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":". This way, it’s possible to set or add a value of a custom type with a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s worth to note that making a type conform to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":" is enough to make it "},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"type":"text","text":" too. A value of this type will be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"encoded"}]},{"type":"text","text":" to an "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":". Thus, using the following structure:"}]},{"type":"codeListing","syntax":"swift","code":["struct Record: Codable, ExplorerValueConvertible {","    var name: String","    var score: Int","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s possible to set a "},{"type":"codeVoice","code":"Record"},{"type":"text","text":" value with any "},{"type":"codeVoice","code":"PathExplorer"}]},{"type":"codeListing","syntax":"swift","code":["let record = Record(name: \"Riri\", score: 20)","","\/\/ plist: CodablePathExplorer<PlistFormat>","try plist.set(\"ducks\", \"records\", 0, to: record)"]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even if primitive types conform to "},{"type":"codeVoice","code":"Encodable"},{"type":"text","text":", it would be less efficient to encode them. A simpler implementation for "},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"type":"text","text":" is provided. The same goes for an array of a primitive type and for a dictionary where "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is a primitive type."}]}]},{"anchor":"ExplorerValueCreatable","level":2,"type":"heading","text":"ExplorerValueCreatable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The counterpart of "},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"type":"text","text":" is "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueCreatable"},{"type":"text","text":". Types conforming to this protocol declare an initialization from an "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":". This allows to export the value of an "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" to the type."}]},{"type":"aside","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly with "},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"type":"text","text":", a default implementation is provided for primitive types and types conforming to "},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the "},{"type":"codeVoice","code":"Record"},{"type":"text","text":" structure from above,"}]},{"type":"codeListing","syntax":"swift","code":["struct Record: Codable, ExplorerValueConvertible {","    var name: String","    var score: Int","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"it’s possible to try to export a value of a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" as an array of "},{"type":"codeVoice","code":"Record"},{"type":"text","text":"s with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/array(of:)"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ plist: CodablePathExplorer<PlistFormat>","let records = try plist.get(\"Riri\", \"records\").array(of: Record.self)"]},{"anchor":"ExplorerValueConvertible","level":2,"type":"heading","text":"ExplorerValueConvertible"},{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueConvertible"},{"type":"text","text":" is simply a type alias for both "},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExplorerValueCreatable"},{"type":"text","text":" protocols."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/scout\/custom-types-explorervalue"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/Scout\/documentation\/Scout\/custom-types-explorerValue","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn more about the back bone of the serializable "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"},{"type":"text","text":"s and understand how you can use it to inject your own types when setting or adding values."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Custom types with ExplorerValue","role":"article","modules":[{"name":"Scout"}]},"hierarchy":{"paths":[["doc:\/\/Scout\/documentation\/Scout"]]},"seeAlsoSections":[{"title":"Set and add custom types","identifiers":["doc:\/\/Scout\/documentation\/Scout\/ExplorerValue","doc:\/\/Scout\/documentation\/Scout\/ExplorerValueCreatable","doc:\/\/Scout\/documentation\/Scout\/ExplorerValueRepresentable","doc:\/\/Scout\/documentation\/Scout\/ExplorerValueConvertible"],"generated":true}],"references":{"doc://Scout/documentation/Scout/PathExplorers/Yaml":{"role":"symbol","title":"PathExplorers.Yaml","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Yaml"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Yaml","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Yaml"}],"url":"\/documentation\/scout\/pathexplorers\/yaml"},"doc://Scout/documentation/Scout/ExplorerValueRepresentable":{"role":"symbol","title":"ExplorerValueRepresentable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExplorerValueRepresentable"}],"abstract":[{"type":"text","text":"Can be represented as an "},{"type":"codeVoice","code":"ExplorerValue"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueRepresentable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExplorerValueRepresentable"}],"url":"\/documentation\/scout\/explorervaluerepresentable"},"doc://Scout/documentation/Scout/ExplorerValueConvertible":{"role":"symbol","title":"ExplorerValueConvertible","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExplorerValueConvertible"}],"abstract":[{"type":"text","text":"Can be represented "},{"type":"emphasis","inlineContent":[{"type":"text","text":"as"}]},{"type":"text","text":" and instantiated "},{"type":"emphasis","inlineContent":[{"type":"text","text":"from"}]},{"type":"text","text":" an "},{"type":"codeVoice","code":"ExplorerValue"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueConvertible","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExplorerValueConvertible"}],"url":"\/documentation\/scout\/explorervalueconvertible"},"doc://Scout/documentation/Scout/PathExplorers/Json":{"role":"symbol","title":"PathExplorers.Json","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Json"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Json"}],"url":"\/documentation\/scout\/pathexplorers\/json"},"doc://Scout/documentation/Scout/PathExplorer":{"role":"symbol","title":"PathExplorer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathExplorer"}],"abstract":[{"type":"text","text":"Wrap several structs to explore several format: Json, Plist, YAML and Xml"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathExplorer"}],"url":"\/documentation\/scout\/pathexplorer"},"doc://Scout/documentation/Scout/PathExplorers":{"role":"symbol","title":"PathExplorers","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PathExplorers"}],"abstract":[{"type":"text","text":"Namespace to find all default PathExplorers in a single place"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PathExplorers"}],"url":"\/documentation\/scout\/pathexplorers"},"doc://Scout/documentation/Scout/PathExplorers/Plist":{"role":"symbol","title":"PathExplorers.Plist","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Plist"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Plist","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Plist"}],"url":"\/documentation\/scout\/pathexplorers\/plist"},"doc://Scout/documentation/Scout/CodableFormat":{"role":"symbol","title":"CodableFormat","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodableFormat"}],"abstract":[],"identifier":"doc:\/\/Scout\/documentation\/Scout\/CodableFormat","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CodableFormat"}],"url":"\/documentation\/scout\/codableformat"},"doc://Scout/documentation/Scout/PathExplorer/array(of:)":{"role":"symbol","title":"array(of:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"array"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> ["},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"]"}],"abstract":[{"type":"text","text":"An array of the provided type"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/array(of:)","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/scout\/pathexplorer\/array(of:)"},"doc://Scout/documentation/Scout/CodablePathExplorer":{"role":"symbol","title":"CodablePathExplorer","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodablePathExplorer"}],"abstract":[{"type":"text","text":"A  concrete implementation of "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" with a specific "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/CodableFormat"},{"type":"text","text":"."}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/CodablePathExplorer","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"CodablePathExplorer"}],"url":"\/documentation\/scout\/codablepathexplorer"},"doc://Scout/documentation/Scout/ExplorerValueCreatable":{"role":"symbol","title":"ExplorerValueCreatable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExplorerValueCreatable"}],"abstract":[{"type":"text","text":"Can be instantiated from an "},{"type":"codeVoice","code":"ExplorerValue"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueCreatable","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExplorerValueCreatable"}],"url":"\/documentation\/scout\/explorervaluecreatable"},"doc://Scout/documentation/Scout/ExplorerValue":{"role":"symbol","title":"ExplorerValue","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExplorerValue"}],"abstract":[{"type":"text","text":"The values a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" can take"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ExplorerValue"}],"url":"\/documentation\/scout\/explorervalue"},"doc://Scout/documentation/Scout":{"role":"collection","title":"Scout","abstract":[{"type":"text","text":"This library aims to make specific formats data values reading and writing simple when the data format is not known at build time."}],"identifier":"doc:\/\/Scout\/documentation\/Scout","kind":"symbol","type":"topic","url":"\/documentation\/scout"}}}