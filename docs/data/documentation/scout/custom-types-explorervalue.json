{"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/Scout\/documentation\/Scout"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/scout\/custom-types-explorervalue"]}],"identifier":{"url":"doc:\/\/Scout\/documentation\/Scout\/custom-types-explorerValue","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Meet-ExplorerValue","text":"Meet ExplorerValue"},{"inlineContent":[{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" is a type implementing the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer"},{"type":"text","text":" protocol. As it implements "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" too, it can be used as a "},{"code":"PathExplorer","type":"codeVoice"},{"type":"text","text":" as long as a coder exists for the data format. Thus, JSON, Plist and YAML "},{"code":"PathExplorer","type":"codeVoice"},{"type":"text","text":"s can use the "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" type to get simple conformance to the protocol."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"That’s why "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/CodablePathExplorer"},{"text":" is mainly a wrapper around ","type":"text"},{"type":"codeVoice","code":"ExplorerValue"},{"text":" to provide a generic structure implementing ","type":"text"},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":". "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Plist","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Yaml","isActive":true,"type":"reference"},{"type":"text","text":" are simply type aliases for "},{"type":"codeVoice","code":"CodablePathExplorer"},{"type":"text","text":", and differs only by the generic type "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/CodableFormat"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As "},{"type":"codeVoice","code":"ExplorerValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Codable"},{"text":", it’s possible to provide a custom ","type":"text"},{"code":"Encoder","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Decoder","type":"codeVoice"},{"text":" rather than using the default ones coming with the ","type":"text"},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers","isActive":true},{"type":"text","text":" namespace. This allows to specify date coding strategies for example, or to support new data formats in a blink of an eye with a dedicated Encoder\/Decoder."}]},{"type":"heading","text":"ExplorerValueCreatable","level":2,"anchor":"ExplorerValueCreatable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To take things further, it’s also possible to convert any type to an "},{"code":"ExplorerValue","type":"codeVoice"},{"type":"text","text":" with "},{"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueRepresentable","isActive":true},{"type":"text","text":". This protocol’s only requirement is a function that returns an "},{"code":"ExplorerValue","type":"codeVoice"},{"text":". This way, it’s possible to set or add a value of a custom type with a ","type":"text"},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":"."}]},{"inlineContent":[{"type":"text","text":"It’s worth to note that making a type conform to "},{"code":"Encodable","type":"codeVoice"},{"text":" is enough to make it ","type":"text"},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"text":" too. A value of this type will be ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"encoded","type":"text"}]},{"type":"text","text":" to an "},{"code":"ExplorerValue","type":"codeVoice"},{"type":"text","text":". Thus, using the following structure:"}],"type":"paragraph"},{"code":["struct Record: Codable, ExplorerValueConvertible {","    var name: String","    var score: Int","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"It’s possible to set a ","type":"text"},{"code":"Record","type":"codeVoice"},{"text":" value with any ","type":"text"},{"code":"PathExplorer","type":"codeVoice"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let record = Record(name: \"Riri\", score: 20)","","\/\/ plist: CodablePathExplorer<PlistFormat>","try plist.set(\"ducks\", \"records\", 0, to: record)"]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even if primitive types conform to "},{"type":"codeVoice","code":"Encodable"},{"text":", it would be less efficient to encode them. A simpler implementation for ","type":"text"},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"type":"text","text":" is provided. The same goes for an array of a primitive type and for a dictionary where "},{"type":"codeVoice","code":"Value"},{"text":" is a primitive type.","type":"text"}]}],"style":"note"},{"text":"ExplorerValueCreatable","type":"heading","anchor":"ExplorerValueCreatable","level":2},{"inlineContent":[{"text":"The counterpart of ","type":"text"},{"code":"ExplorerValueRepresentable","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ExplorerValueCreatable"},{"text":". Types conforming to this protocol declare an initialization from an ","type":"text"},{"code":"ExplorerValue","type":"codeVoice"},{"type":"text","text":". This allows to export the value of an "},{"type":"codeVoice","code":"ExplorerValue"},{"text":" to the type.","type":"text"}],"type":"paragraph"},{"type":"aside","name":"Tip","style":"tip","content":[{"inlineContent":[{"text":"Similarly with ","type":"text"},{"type":"codeVoice","code":"ExplorerValueRepresentable"},{"text":", a default implementation is provided for primitive types and types conforming to ","type":"text"},{"code":"Decodable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the "},{"code":"Record","type":"codeVoice"},{"text":" structure from above,","type":"text"}]},{"syntax":"swift","code":["struct Record: Codable, ExplorerValueConvertible {","    var name: String","    var score: Int","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"it’s possible to try to export a value of a "},{"type":"codeVoice","code":"PathExplorer"},{"text":" as an array of ","type":"text"},{"type":"codeVoice","code":"Record"},{"type":"text","text":"s with "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/array(of:)","isActive":true,"type":"reference"}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ plist: CodablePathExplorer<PlistFormat>","let records = try plist.get(\"Riri\", \"records\").array(of: Record.self)"],"syntax":"swift"},{"level":2,"type":"heading","text":"ExplorerValueConvertible","anchor":"ExplorerValueConvertible"},{"type":"paragraph","inlineContent":[{"code":"ExplorerValueConvertible","type":"codeVoice"},{"text":" is simply a type alias for both ","type":"text"},{"code":"ExplorerValueRepresentable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ExplorerValueCreatable"},{"text":" protocols.","type":"text"}]}]}],"kind":"article","seeAlsoSections":[{"title":"Set and add custom types","identifiers":["doc:\/\/Scout\/documentation\/Scout\/ExplorerValueCreatable","doc:\/\/Scout\/documentation\/Scout\/ExplorerValueRepresentable","doc:\/\/Scout\/documentation\/Scout\/ExplorerValueConvertible"],"generated":true}],"abstract":[{"type":"text","text":"Learn more about the back bone of the serializable "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","type":"reference","isActive":true},{"text":"s and understand how you can use it to inject your own types when setting or adding values.","type":"text"}],"metadata":{"modules":[{"name":"Scout"}],"role":"article","roleHeading":"Article","title":"Custom types with ExplorerValue"},"references":{"doc://Scout/documentation/Scout/PathExplorers/Json":{"title":"PathExplorers.Json","role":"symbol","url":"\/documentation\/scout\/pathexplorers\/json","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Json","navigatorTitle":[{"text":"Json","kind":"identifier"}],"kind":"symbol","abstract":[],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Json"}]},"doc://Scout/documentation/Scout/ExplorerValueConvertible":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ExplorerValueConvertible"}],"url":"\/documentation\/scout\/explorervalueconvertible","title":"ExplorerValueConvertible","kind":"symbol","identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueConvertible","navigatorTitle":[{"text":"ExplorerValueConvertible","kind":"identifier"}],"type":"topic","abstract":[{"type":"text","text":"Can be represented "},{"type":"emphasis","inlineContent":[{"type":"text","text":"as"}]},{"type":"text","text":" and instantiated "},{"inlineContent":[{"type":"text","text":"from"}],"type":"emphasis"},{"text":" an ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue"}],"role":"symbol"},"doc://Scout/documentation/Scout/CodablePathExplorer":{"kind":"symbol","url":"\/documentation\/scout\/codablepathexplorer","navigatorTitle":[{"text":"CodablePathExplorer","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodablePathExplorer","kind":"identifier"}],"abstract":[{"text":"A  concrete implementation of ","type":"text"},{"code":"PathExplorer","type":"codeVoice"},{"type":"text","text":" with a specific "},{"identifier":"doc:\/\/Scout\/documentation\/Scout\/CodableFormat","type":"reference","isActive":true},{"text":".","type":"text"}],"role":"symbol","title":"CodablePathExplorer","identifier":"doc:\/\/Scout\/documentation\/Scout\/CodablePathExplorer","type":"topic"},"doc://Scout/documentation/Scout/PathExplorers/Yaml":{"abstract":[],"url":"\/documentation\/scout\/pathexplorers\/yaml","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Yaml"}],"title":"PathExplorers.Yaml","navigatorTitle":[{"kind":"identifier","text":"Yaml"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Yaml"},"doc://Scout/documentation/Scout/PathExplorer":{"title":"PathExplorer","kind":"symbol","abstract":[{"type":"text","text":"Wrap several structs to explore several format: Json, Plist, YAML and Xml"}],"type":"topic","url":"\/documentation\/scout\/pathexplorer","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"PathExplorer"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PathExplorer","kind":"identifier"}]},"doc://Scout/documentation/Scout/CodableFormat":{"identifier":"doc:\/\/Scout\/documentation\/Scout\/CodableFormat","url":"\/documentation\/scout\/codableformat","navigatorTitle":[{"text":"CodableFormat","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodableFormat"}],"abstract":[],"role":"symbol","type":"topic","kind":"symbol","title":"CodableFormat"},"doc://Scout/documentation/Scout/PathExplorers":{"abstract":[{"type":"text","text":"Namespace to find all default PathExplorers in a single place"}],"url":"\/documentation\/scout\/pathexplorers","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PathExplorers"}],"title":"PathExplorers","navigatorTitle":[{"kind":"identifier","text":"PathExplorers"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers"},"doc://Scout/documentation/Scout/ExplorerValueRepresentable":{"type":"topic","url":"\/documentation\/scout\/explorervaluerepresentable","role":"symbol","title":"ExplorerValueRepresentable","identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueRepresentable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExplorerValueRepresentable","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ExplorerValueRepresentable"}],"abstract":[{"type":"text","text":"Can be represented as an "},{"code":"ExplorerValue","type":"codeVoice"}],"kind":"symbol"},"doc://Scout/documentation/Scout/PathExplorers/Plist":{"abstract":[],"url":"\/documentation\/scout\/pathexplorers\/plist","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"Plist","kind":"identifier"}],"title":"PathExplorers.Plist","navigatorTitle":[{"text":"Plist","kind":"identifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorers\/Plist"},"doc://Scout/documentation/Scout/PathExplorer/array(of:)":{"identifier":"doc:\/\/Scout\/documentation\/Scout\/PathExplorer\/array(of:)","url":"\/documentation\/scout\/pathexplorer\/array(of:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"array","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":".Type) ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> [","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"]"}],"type":"topic","abstract":[{"text":"An array of the provided type","type":"text"}],"title":"array(of:)","kind":"symbol","role":"symbol","required":true},"doc://Scout/documentation/Scout":{"abstract":[{"type":"text","text":"This library aims to make specific formats data values reading and writing simple when the data format is not known at build time."}],"identifier":"doc:\/\/Scout\/documentation\/Scout","url":"\/documentation\/scout","type":"topic","role":"collection","title":"Scout","kind":"symbol"},"doc://Scout/documentation/Scout/ExplorerValue":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExplorerValue"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue","title":"ExplorerValue","abstract":[{"type":"text","text":"The values a "},{"type":"codeVoice","code":"PathExplorer"},{"type":"text","text":" can take"}],"role":"symbol","navigatorTitle":[{"text":"ExplorerValue","kind":"identifier"}],"url":"\/documentation\/scout\/explorervalue"},"doc://Scout/documentation/Scout/ExplorerValueCreatable":{"abstract":[{"type":"text","text":"Can be instantiated from an "},{"isActive":true,"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValue","type":"reference"}],"identifier":"doc:\/\/Scout\/documentation\/Scout\/ExplorerValueCreatable","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ExplorerValueCreatable","kind":"identifier"}],"url":"\/documentation\/scout\/explorervaluecreatable","navigatorTitle":[{"text":"ExplorerValueCreatable","kind":"identifier"}],"type":"topic","title":"ExplorerValueCreatable"}}}