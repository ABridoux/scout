{"interfaceLanguages":{"swift":[{"children":[{"title":"Updates","type":"groupMarker"},{"path":"\/documentation\/scout\/new-4.0.0","title":"Whatâ€™s new in Scout  4.0.0","type":"article"},{"title":"Essential","type":"groupMarker"},{"path":"\/documentation\/scout\/getting-started","title":"Getting started with Scout","type":"article"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/init(value:name:)","title":"init(value: ExplorerValue, name: String?)","type":"init"},{"path":"\/documentation\/scout\/pathexplorer\/init(value:)","title":"init(value: ExplorerValue)","type":"init"},{"title":"Accessing read values","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/string","title":"var string: String?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/int","title":"var int: Int?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/double","title":"var double: Double?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/bool","title":"var bool: Bool?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/data","title":"var data: Data?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/date","title":"var date: Date?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/array(of:)","title":"func array<T>(of: T.Type) throws -> [T]","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/dictionary(of:)","title":"func dictionary<T>(of: T.Type) throws -> [String : T]","type":"method"},{"title":"Singularity","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/issingle","title":"var isSingle: Bool","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/isgroup","title":"var isGroup: Bool","type":"property"},{"title":"Reading values","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-2ghf1","title":"func get([PathElement]) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-6pa9h","title":"func get(PathElement...) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/get(_:)-8vyte","title":"func get(Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-6pa9h","title":"func get(PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-2ghf1","title":"func get([PathElement]) throws -> Self","type":"method"},{"title":"Setting values","type":"groupMarker"},{"children":[{"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-5fgny","title":"func set(Path, to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-6yk0i","title":"func set(Path, to: ExplorerValueRepresentable) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-9d877","title":"func set(PathElement..., to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-376n0","title":"func set(PathElement..., to: ExplorerValueRepresentable) throws","type":"method"},{"title":"Setting values in a new explorer","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-9vtr8","title":"func setting(Path, to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-n2ij","title":"func setting(PathElement..., to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-5tdzy","title":"func setting(PathElement..., to: ExplorerValue) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-7q3g","title":"func setting(Path, to: ExplorerValue) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-9vtr8","title":"func setting(Path, to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-5tdzy","title":"func setting(PathElement..., to: ExplorerValue) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-n2ij","title":"func setting(PathElement..., to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"title":"Setting key names","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-1zwfv","title":"func set(PathElement..., keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-5j60r","title":"func set([PathElement], keyNameTo: String) throws","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-9i6hd","title":"func set(Path, keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-5j60r","title":"func set([PathElement], keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-1zwfv","title":"func set(PathElement..., keyNameTo: String) throws","type":"method"},{"title":"Settings key names in a new explorer","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-7ar89","title":"func setting(PathElement..., keyNameTo: String) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-1vrh","title":"func setting([PathElement], keyNameTo: String) throws -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-7ar89","title":"func setting(PathElement..., keyNameTo: String) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-1vrh","title":"func setting([PathElement], keyNameTo: String) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-1fmyp","title":"func setting(Path, keyNameTo: String) throws -> Self","type":"method"},{"title":"Deleting values","type":"groupMarker"},{"children":[{"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/delete(_:deleteifempty:)-g45f","title":"func delete(Path, deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/delete(_:)","title":"func delete(Path) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/delete(_:deleteifempty:)-40w9g","title":"func delete([PathElement], deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/delete(_:deleteifempty:)-2uxwq","title":"func delete(PathElement..., deleteIfEmpty: Bool) throws","type":"method"},{"title":"Deleting values in a new explorer","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-1byw9","title":"func deleting([PathElement], deleteIfEmpty: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-2u4ud","title":"func deleting(PathElement..., deleteIfEmpty: Bool) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-32ufs","title":"func deleting(Path, deleteIfEmpty: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-1byw9","title":"func deleting([PathElement], deleteIfEmpty: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-2u4ud","title":"func deleting(PathElement..., deleteIfEmpty: Bool) throws -> Self","type":"method"},{"title":"Adding values","type":"groupMarker"},{"children":[{"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-861h4","title":"func add(ExplorerValue, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-6wo3i","title":"func add(ExplorerValueRepresentable, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-2kii6","title":"func add(ExplorerValue, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-2zxor","title":"func add(ExplorerValueRepresentable, at: PathElement...) throws","type":"method"},{"title":"Adding values in a new explorer","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-5uv86","title":"func adding(ExplorerValueRepresentable, at: PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-4ju9b","title":"func adding(ExplorerValueRepresentable, at: Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-68mxp","title":"func adding(ExplorerValue, at: PathElement...) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-7fd9c","title":"func adding(ExplorerValue, at: Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-4ju9b","title":"func adding(ExplorerValueRepresentable, at: Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-68mxp","title":"func adding(ExplorerValue, at: PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-5uv86","title":"func adding(ExplorerValueRepresentable, at: PathElement...) throws -> Self","type":"method"},{"title":"Listing paths","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-8y0x2","title":"func listPaths(startingAt: PathElement..., filter: PathsFilter) throws -> [Path]","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-4tkeq","title":"func listPaths(startingAt: Path?, filter: PathsFilter) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:)","title":"func listPaths(startingAt: Path?) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-8y0x2","title":"func listPaths(startingAt: PathElement..., filter: PathsFilter) throws -> [Path]","type":"method"},{"title":"Deprecated","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/real","title":"var real: Double?","type":"property"}],"path":"\/documentation\/scout\/pathexplorer","title":"PathExplorer","type":"protocol"},{"children":[{"title":"Instantiate an empty Path","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init()","title":"init()","type":"init"},{"path":"\/documentation\/scout\/path\/empty","title":"static var empty: Path","type":"property"},{"title":"Instantiate from PathElement values","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(elements:)-8dch4","title":"init(elements: PathElement...)","type":"init"},{"path":"\/documentation\/scout\/path\/init(elements:)-9i64v","title":"init(elements: [PathElement])","type":"init"},{"title":"Instantiate from PathElementRepresentable values","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(_:)-1b2iy","title":"init(PathElementRepresentable...)","type":"init"},{"path":"\/documentation\/scout\/path\/init(_:)-cgb7","title":"init([PathElementRepresentable])","type":"init"},{"path":"\/documentation\/scout\/path\/init(arrayliteral:)","title":"init(arrayLiteral: PathElementRepresentable...)","type":"init"},{"title":"Instantiate from a String","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(string:separator:)","title":"init(string: String, separator: String) throws","type":"init"},{"path":"\/documentation\/scout\/path\/defaultseparator","title":"static let defaultSeparator: String","type":"property"},{"path":"\/documentation\/scout\/path\/parser(separator:keyforbiddencharacters:)","title":"static func parser(separator: String, keyForbiddenCharacters: [Character]) -> Parser<[PathElement]>","type":"method"},{"title":"Appending elements","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/append(_:)-9l194","title":"func append(PathElementRepresentable)","type":"method"},{"path":"\/documentation\/scout\/path\/appending(_:)-2ptn6","title":"func appending(PathElement...) -> Path","type":"method"},{"path":"\/documentation\/scout\/path\/appending(_:)-3mvwq","title":"func appending(PathElementRepresentable...) -> Path","type":"method"},{"title":"Flatten a Path","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/flattened()","title":"func flattened() -> Path","type":"method"},{"title":"Map elements (Collection)","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/compactmapindexes","title":"var compactMapIndexes: [Int]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapkeys","title":"var compactMapKeys: [String]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapslices","title":"var compactMapSlices: [Bounds]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapfilter","title":"var compactMapFilter: [String]","type":"property"},{"title":"Compare path (Collection)","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/commonprefix(with:)","title":"func commonPrefix(with: Self) -> Slice<Path>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/scout\/path\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/scout\/path\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/scout\/path\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/scout\/path\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/compactmapfilter","title":"var compactMapFilter: [String]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapindexes","title":"var compactMapIndexes: [Int]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapkeys","title":"var compactMapKeys: [String]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapslices","title":"var compactMapSlices: [Bounds]","type":"property"},{"path":"\/documentation\/scout\/path\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/scout\/path\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/scout\/path\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/scout\/path\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/scout\/path\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/scout\/path\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/scout\/path\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/scout\/path\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/commonprefix(with:)","title":"func commonPrefix(with: Self) -> Slice<Path>","type":"method"},{"path":"\/documentation\/scout\/path\/comparedbykeyandindexes(with:)","title":"func comparedByKeyAndIndexes(with: Path) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/scout\/path\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/scout\/path\/map(_:)-1pyvn","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/scout\/path\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/scout\/path\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/scout\/path\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/subscript(_:)","title":"subscript(Int) -> PathElement","type":"subscript"}],"path":"\/documentation\/scout\/path\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/path\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(arrayliteral:)","title":"init(arrayLiteral: PathElementRepresentable...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/arrayliteralelement","title":"Path.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/scout\/path\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/partition(by:)-5mp72","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/scout\/path\/partition(by:)-70krf","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/scout\/path\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/scout\/path\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/scout\/path\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/scout\/path\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/sort(using:)-20eip","title":"func sort<Comparator>(using: Comparator)","type":"method"},{"path":"\/documentation\/scout\/path\/sort(using:)-7hq1j","title":"func sort<S, Comparator>(using: S)","type":"method"},{"path":"\/documentation\/scout\/path\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/scout\/path\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/scout\/path\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/+(_:_:)-1mpyt","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/scout\/path\/+(_:_:)-4knou","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/scout\/path\/+(_:_:)-wurs","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/scout\/path\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(_:)-3ayg2","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/scout\/path\/init(repeating:count:)","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/append(_:)-6mddf","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/scout\/path\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/scout\/path\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/scout\/path\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/scout\/path\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/remove(at:)","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/scout\/path\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/scout\/path\/removeall(where:)-13bwz","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/removeall(where:)-6oyg2","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/scout\/path\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/scout\/path\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/scout\/path\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/scout\/path\/removesubrange(_:)-28mkd","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/scout\/path\/removesubrange(_:)-3w6oh","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/scout\/path\/replace(_:with:maxreplacements:)","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","type":"method"},{"path":"\/documentation\/scout\/path\/replacesubrange(_:with:)-69vd1","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/scout\/path\/replacesubrange(_:with:)-8jwu3","title":"func replaceSubrange<C>(Range<Int>, with: C)","type":"method"},{"path":"\/documentation\/scout\/path\/replacesubrange(_:with:)-8v4n8","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/scout\/path\/replacing(_:with:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/scout\/path\/replacing(_:with:subrange:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/scout\/path\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/scout\/path\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/scout\/path\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"path":"\/documentation\/scout\/path\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/scout\/path\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/scout\/path\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/scout\/path\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/scout\/path\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/flatmap(_:)-4dfav","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/scout\/path\/flatmap(_:)-658d","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/scout\/path\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/map(_:)-3bvvx","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/scout\/path\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/scout\/path\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/scout\/path\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/sorted(using:)-1q9xt","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/sorted(using:)-2epe7","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/scout\/path\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/scout\/path","title":"Path","type":"struct"},{"title":"Explore data","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/init(value:name:)","title":"init(value: ExplorerValue, name: String?)","type":"init"},{"path":"\/documentation\/scout\/pathexplorer\/init(value:)","title":"init(value: ExplorerValue)","type":"init"},{"title":"Accessing read values","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/string","title":"var string: String?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/int","title":"var int: Int?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/double","title":"var double: Double?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/bool","title":"var bool: Bool?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/data","title":"var data: Data?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/date","title":"var date: Date?","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/array(of:)","title":"func array<T>(of: T.Type) throws -> [T]","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/dictionary(of:)","title":"func dictionary<T>(of: T.Type) throws -> [String : T]","type":"method"},{"title":"Singularity","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/issingle","title":"var isSingle: Bool","type":"property"},{"path":"\/documentation\/scout\/pathexplorer\/isgroup","title":"var isGroup: Bool","type":"property"},{"title":"Reading values","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-2ghf1","title":"func get([PathElement]) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-6pa9h","title":"func get(PathElement...) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/get(_:)-8vyte","title":"func get(Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-6pa9h","title":"func get(PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/get(_:)-2ghf1","title":"func get([PathElement]) throws -> Self","type":"method"},{"title":"Setting values","type":"groupMarker"},{"children":[{"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-5fgny","title":"func set(Path, to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-6yk0i","title":"func set(Path, to: ExplorerValueRepresentable) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-9d877","title":"func set(PathElement..., to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:to:)-376n0","title":"func set(PathElement..., to: ExplorerValueRepresentable) throws","type":"method"},{"title":"Setting values in a new explorer","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-9vtr8","title":"func setting(Path, to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-n2ij","title":"func setting(PathElement..., to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-5tdzy","title":"func setting(PathElement..., to: ExplorerValue) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-7q3g","title":"func setting(Path, to: ExplorerValue) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-9vtr8","title":"func setting(Path, to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-5tdzy","title":"func setting(PathElement..., to: ExplorerValue) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:to:)-n2ij","title":"func setting(PathElement..., to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"title":"Setting key names","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-1zwfv","title":"func set(PathElement..., keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-5j60r","title":"func set([PathElement], keyNameTo: String) throws","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-9i6hd","title":"func set(Path, keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-5j60r","title":"func set([PathElement], keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/set(_:keynameto:)-1zwfv","title":"func set(PathElement..., keyNameTo: String) throws","type":"method"},{"title":"Settings key names in a new explorer","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-7ar89","title":"func setting(PathElement..., keyNameTo: String) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-1vrh","title":"func setting([PathElement], keyNameTo: String) throws -> Self","type":"method"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-7ar89","title":"func setting(PathElement..., keyNameTo: String) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-1vrh","title":"func setting([PathElement], keyNameTo: String) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/setting(_:keynameto:)-1fmyp","title":"func setting(Path, keyNameTo: String) throws -> Self","type":"method"},{"title":"Deleting values","type":"groupMarker"},{"children":[{"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/delete(_:deleteifempty:)-g45f","title":"func delete(Path, deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/delete(_:)","title":"func delete(Path) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/delete(_:deleteifempty:)-40w9g","title":"func delete([PathElement], deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/delete(_:deleteifempty:)-2uxwq","title":"func delete(PathElement..., deleteIfEmpty: Bool) throws","type":"method"},{"title":"Deleting values in a new explorer","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-1byw9","title":"func deleting([PathElement], deleteIfEmpty: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-2u4ud","title":"func deleting(PathElement..., deleteIfEmpty: Bool) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-32ufs","title":"func deleting(Path, deleteIfEmpty: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-1byw9","title":"func deleting([PathElement], deleteIfEmpty: Bool) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/deleting(_:deleteifempty:)-2u4ud","title":"func deleting(PathElement..., deleteIfEmpty: Bool) throws -> Self","type":"method"},{"title":"Adding values","type":"groupMarker"},{"children":[{"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-861h4","title":"func add(ExplorerValue, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-6wo3i","title":"func add(ExplorerValueRepresentable, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-2kii6","title":"func add(ExplorerValue, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/add(_:at:)-2zxor","title":"func add(ExplorerValueRepresentable, at: PathElement...) throws","type":"method"},{"title":"Adding values in a new explorer","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-5uv86","title":"func adding(ExplorerValueRepresentable, at: PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-4ju9b","title":"func adding(ExplorerValueRepresentable, at: Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-68mxp","title":"func adding(ExplorerValue, at: PathElement...) throws -> Self","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-7fd9c","title":"func adding(ExplorerValue, at: Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-4ju9b","title":"func adding(ExplorerValueRepresentable, at: Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-68mxp","title":"func adding(ExplorerValue, at: PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/adding(_:at:)-5uv86","title":"func adding(ExplorerValueRepresentable, at: PathElement...) throws -> Self","type":"method"},{"title":"Listing paths","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-8y0x2","title":"func listPaths(startingAt: PathElement..., filter: PathsFilter) throws -> [Path]","type":"method"}],"title":"PathExplorer Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-4tkeq","title":"func listPaths(startingAt: Path?, filter: PathsFilter) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:)","title":"func listPaths(startingAt: Path?) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/pathexplorer\/listpaths(startingat:filter:)-8y0x2","title":"func listPaths(startingAt: PathElement..., filter: PathsFilter) throws -> [Path]","type":"method"},{"title":"Deprecated","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorer\/real","title":"var real: Double?","type":"property"}],"path":"\/documentation\/scout\/pathexplorer","title":"PathExplorer","type":"protocol"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/pathexplorers\/json","title":"PathExplorers.Json","type":"typealias"},{"path":"\/documentation\/scout\/pathexplorers\/plist","title":"PathExplorers.Plist","type":"typealias"},{"path":"\/documentation\/scout\/pathexplorers\/xml","title":"PathExplorers.Xml","type":"typealias"},{"path":"\/documentation\/scout\/pathexplorers\/yaml","title":"PathExplorers.Yaml","type":"typealias"}],"path":"\/documentation\/scout\/pathexplorers","title":"PathExplorers","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/array(_:)","title":"case array(ExplorerValue.ArrayValue)","type":"case"},{"path":"\/documentation\/scout\/explorervalue\/bool(_:)","title":"case bool(Bool)","type":"case"},{"path":"\/documentation\/scout\/explorervalue\/data(_:)","title":"case data(Data)","type":"case"},{"path":"\/documentation\/scout\/explorervalue\/date(_:)","title":"case date(Date)","type":"case"},{"path":"\/documentation\/scout\/explorervalue\/dictionary(_:)","title":"case dictionary(ExplorerValue.DictionaryValue)","type":"case"},{"path":"\/documentation\/scout\/explorervalue\/double(_:)","title":"case double(Double)","type":"case"},{"path":"\/documentation\/scout\/explorervalue\/int(_:)","title":"case int(Int)","type":"case"},{"path":"\/documentation\/scout\/explorervalue\/string(_:)","title":"case string(String)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/array","title":"var array: ExplorerValue.ArrayValue?","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/dictionary","title":"var dictionary: ExplorerValue.DictionaryValue?","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/arrayvalue","title":"ExplorerValue.ArrayValue","type":"typealias"},{"path":"\/documentation\/scout\/explorervalue\/dictionaryvalue","title":"ExplorerValue.DictionaryValue","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/scout\/explorervalue\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/scout\/explorervalue\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/scout\/explorervalue\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/explorervalue\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(arrayliteral:)","title":"init(arrayLiteral: ExplorerValue...)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebybooleanliteral-implementations","title":"ExpressibleByBooleanLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(dictionaryliteral:)","title":"init(dictionaryLiteral: (String, ExplorerValue)...)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebydictionaryliteral-implementations","title":"ExpressibleByDictionaryLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/scout\/explorervalue\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/init(value:)","title":"init(value: ExplorerValue)","type":"init"},{"path":"\/documentation\/scout\/explorervalue\/init(value:name:)","title":"init(value: ExplorerValue, name: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/bool","title":"var bool: Bool?","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/data","title":"var data: Data?","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/date","title":"var date: Date?","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/double","title":"var double: Double?","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/int","title":"var int: Int?","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/isgroup","title":"var isGroup: Bool","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/issingle","title":"var isSingle: Bool","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/real","title":"var real: Double?","type":"property"},{"path":"\/documentation\/scout\/explorervalue\/string","title":"var string: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorervalue\/add(_:at:)-4gmuo","title":"func add(ExplorerValueRepresentable, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/add(_:at:)-5gilx","title":"func add(ExplorerValue, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/add(_:at:)-8223h","title":"func add(ExplorerValue, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/add(_:at:)-8r71p","title":"func add(ExplorerValueRepresentable, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/adding(_:at:)","title":"func adding(ExplorerValue, at: Path) throws -> ExplorerValue","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/array(of:)","title":"func array<T>(of: T.Type) throws -> [T]","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/delete(_:)","title":"func delete(Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/delete(_:deleteifempty:)-215jh","title":"func delete([PathElement], deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/delete(_:deleteifempty:)-55slk","title":"func delete(Path, deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/delete(_:deleteifempty:)-5j8qh","title":"func delete(PathElement..., deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/deleting(_:deleteifempty:)","title":"func deleting(Path, deleteIfEmpty: Bool) throws -> ExplorerValue","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/dictionary(of:)","title":"func dictionary<T>(of: T.Type) throws -> [String : T]","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/get(_:)","title":"func get(Path) throws -> ExplorerValue","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/listpaths(startingat:)","title":"func listPaths(startingAt: Path?) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/listpaths(startingat:filter:)","title":"func listPaths(startingAt: Path?, filter: PathsFilter) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/set(_:keynameto:)-71khn","title":"func set([PathElement], keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/set(_:keynameto:)-7cmde","title":"func set(PathElement..., keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/set(_:keynameto:)-9elrr","title":"func set(Path, keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/set(_:to:)-1osuj","title":"func set(PathElement..., to: ExplorerValueRepresentable) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/set(_:to:)-1p08w","title":"func set(Path, to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/set(_:to:)-85z1n","title":"func set(Path, to: ExplorerValueRepresentable) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/set(_:to:)-neu9","title":"func set(PathElement..., to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/setting(_:keynameto:)","title":"func setting(Path, keyNameTo: String) throws -> ExplorerValue","type":"method"},{"path":"\/documentation\/scout\/explorervalue\/setting(_:to:)","title":"func setting(Path, to: ExplorerValue) throws -> ExplorerValue","type":"method"}],"path":"\/documentation\/scout\/explorervalue\/pathexplorer-implementations","title":"PathExplorer Implementations","type":"symbol"}],"path":"\/documentation\/scout\/explorervalue","title":"ExplorerValue","type":"enum"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorererror\/errordescription","title":"var errorDescription: String?","type":"property"},{"path":"\/documentation\/scout\/explorererror\/path","title":"var path: Path","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorererror\/subscriptindexnoarray","title":"static var subscriptIndexNoArray: ExplorerError","type":"property"},{"path":"\/documentation\/scout\/explorererror\/subscriptkeynodict","title":"static var subscriptKeyNoDict: ExplorerError","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorererror\/invalid(value:)","title":"static func invalid(value: Any) -> ExplorerError","type":"method"},{"path":"\/documentation\/scout\/explorererror\/mismatchingtype(_:value:)","title":"static func mismatchingType<T>(T.Type, value: ExplorerValue) -> ExplorerError","type":"method"},{"path":"\/documentation\/scout\/explorererror\/missing(key:bestmatch:)","title":"static func missing(key: String, bestMatch: String?) -> ExplorerError","type":"method"},{"path":"\/documentation\/scout\/explorererror\/predicatenotevaluatable(_:description:)","title":"static func predicateNotEvaluatable(String, description: String) -> ExplorerError","type":"method"},{"path":"\/documentation\/scout\/explorererror\/wrong(bounds:arraycount:)","title":"static func wrong(bounds: Bounds, arrayCount: Int) -> ExplorerError","type":"method"},{"path":"\/documentation\/scout\/explorererror\/wrong(index:arraycount:)","title":"static func wrong(index: Int, arrayCount: Int) -> ExplorerError","type":"method"},{"path":"\/documentation\/scout\/explorererror\/wrong(regexpattern:)","title":"static func wrong(regexPattern: String) -> ExplorerError","type":"method"},{"path":"\/documentation\/scout\/explorererror\/wrongusage(of:)","title":"static func wrongUsage(of: PathElement) -> ExplorerError","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/explorererror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/explorererror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorererror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/scout\/explorererror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorererror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/scout\/explorererror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/scout\/explorererror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/scout\/explorererror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/scout\/explorererror","title":"ExplorerError","type":"struct"},{"title":"Manipulate paths","type":"groupMarker"},{"path":"\/documentation\/scout\/mastering-paths","title":"Mastering Paths","type":"article"},{"path":"\/documentation\/scout\/paths-listing","title":"Paths listing","type":"article"},{"children":[{"title":"Instantiate an empty Path","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init()","title":"init()","type":"init"},{"path":"\/documentation\/scout\/path\/empty","title":"static var empty: Path","type":"property"},{"title":"Instantiate from PathElement values","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(elements:)-8dch4","title":"init(elements: PathElement...)","type":"init"},{"path":"\/documentation\/scout\/path\/init(elements:)-9i64v","title":"init(elements: [PathElement])","type":"init"},{"title":"Instantiate from PathElementRepresentable values","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(_:)-1b2iy","title":"init(PathElementRepresentable...)","type":"init"},{"path":"\/documentation\/scout\/path\/init(_:)-cgb7","title":"init([PathElementRepresentable])","type":"init"},{"path":"\/documentation\/scout\/path\/init(arrayliteral:)","title":"init(arrayLiteral: PathElementRepresentable...)","type":"init"},{"title":"Instantiate from a String","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(string:separator:)","title":"init(string: String, separator: String) throws","type":"init"},{"path":"\/documentation\/scout\/path\/defaultseparator","title":"static let defaultSeparator: String","type":"property"},{"path":"\/documentation\/scout\/path\/parser(separator:keyforbiddencharacters:)","title":"static func parser(separator: String, keyForbiddenCharacters: [Character]) -> Parser<[PathElement]>","type":"method"},{"title":"Appending elements","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/append(_:)-9l194","title":"func append(PathElementRepresentable)","type":"method"},{"path":"\/documentation\/scout\/path\/appending(_:)-2ptn6","title":"func appending(PathElement...) -> Path","type":"method"},{"path":"\/documentation\/scout\/path\/appending(_:)-3mvwq","title":"func appending(PathElementRepresentable...) -> Path","type":"method"},{"title":"Flatten a Path","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/flattened()","title":"func flattened() -> Path","type":"method"},{"title":"Map elements (Collection)","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/compactmapindexes","title":"var compactMapIndexes: [Int]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapkeys","title":"var compactMapKeys: [String]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapslices","title":"var compactMapSlices: [Bounds]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapfilter","title":"var compactMapFilter: [String]","type":"property"},{"title":"Compare path (Collection)","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/commonprefix(with:)","title":"func commonPrefix(with: Self) -> Slice<Path>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/scout\/path\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/scout\/path\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(before:)","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/scout\/path\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/scout\/path\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/compactmapfilter","title":"var compactMapFilter: [String]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapindexes","title":"var compactMapIndexes: [Int]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapkeys","title":"var compactMapKeys: [String]","type":"property"},{"path":"\/documentation\/scout\/path\/compactmapslices","title":"var compactMapSlices: [Bounds]","type":"property"},{"path":"\/documentation\/scout\/path\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/scout\/path\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/scout\/path\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/scout\/path\/endindex","title":"var endIndex: Int","type":"property"},{"path":"\/documentation\/scout\/path\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/scout\/path\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/scout\/path\/startindex","title":"var startIndex: Int","type":"property"},{"path":"\/documentation\/scout\/path\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/commonprefix(with:)","title":"func commonPrefix(with: Self) -> Slice<Path>","type":"method"},{"path":"\/documentation\/scout\/path\/comparedbykeyandindexes(with:)","title":"func comparedByKeyAndIndexes(with: Path) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/firstrange(of:)","title":"func firstRange<C>(of: C) -> Range<Self.Index>?","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/formindex(after:)","title":"func formIndex(after: inout Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/index(after:)","title":"func index(after: Int) -> Int","type":"method"},{"path":"\/documentation\/scout\/path\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/scout\/path\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/scout\/path\/map(_:)-1pyvn","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/ranges(of:)","title":"func ranges<C>(of: C) -> [Range<Self.Index>]","type":"method"},{"path":"\/documentation\/scout\/path\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/scout\/path\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/scout\/path\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/trimmingprefix(_:)","title":"func trimmingPrefix<Prefix>(Prefix) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/scout\/path\/trimmingprefix(while:)","title":"func trimmingPrefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/subscript(_:)","title":"subscript(Int) -> PathElement","type":"subscript"}],"path":"\/documentation\/scout\/path\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/path\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(arrayliteral:)","title":"init(arrayLiteral: PathElementRepresentable...)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/arrayliteralelement","title":"Path.ArrayLiteralElement","type":"typealias"}],"path":"\/documentation\/scout\/path\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/partition(by:)-5mp72","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/scout\/path\/partition(by:)-70krf","title":"func partition(by: (Self.Element) throws -> Bool) rethrows -> Self.Index","type":"method"},{"path":"\/documentation\/scout\/path\/reverse()","title":"func reverse()","type":"method"},{"path":"\/documentation\/scout\/path\/shuffle()","title":"func shuffle()","type":"method"},{"path":"\/documentation\/scout\/path\/shuffle(using:)","title":"func shuffle<T>(using: inout T)","type":"method"},{"path":"\/documentation\/scout\/path\/sort(by:)","title":"func sort(by: (Self.Element, Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/sort(using:)-20eip","title":"func sort<Comparator>(using: Comparator)","type":"method"},{"path":"\/documentation\/scout\/path\/sort(using:)-7hq1j","title":"func sort<S, Comparator>(using: S)","type":"method"},{"path":"\/documentation\/scout\/path\/swapat(_:_:)","title":"func swapAt(Self.Index, Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/withcontiguousmutablestorageifavailable(_:)","title":"func withContiguousMutableStorageIfAvailable<R>((inout UnsafeMutableBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/scout\/path\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"}],"path":"\/documentation\/scout\/path\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/+(_:_:)-1mpyt","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/scout\/path\/+(_:_:)-4knou","title":"static func + <Other>(Other, Self) -> Self","type":"op"},{"path":"\/documentation\/scout\/path\/+(_:_:)-wurs","title":"static func + <Other>(Self, Other) -> Self","type":"op"},{"path":"\/documentation\/scout\/path\/+=(_:_:)","title":"static func += <Other>(inout Self, Other)","type":"op"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/init(_:)-3ayg2","title":"init<S>(S)","type":"init"},{"path":"\/documentation\/scout\/path\/init(repeating:count:)","title":"init(repeating: Self.Element, count: Int)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/append(_:)-6mddf","title":"func append(Self.Element)","type":"method"},{"path":"\/documentation\/scout\/path\/append(contentsof:)","title":"func append<S>(contentsOf: S)","type":"method"},{"path":"\/documentation\/scout\/path\/applying(_:)","title":"func applying(CollectionDifference<Self.Element>) -> Self?","type":"method"},{"path":"\/documentation\/scout\/path\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> Self","type":"method"},{"path":"\/documentation\/scout\/path\/insert(_:at:)","title":"func insert(Self.Element, at: Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/insert(contentsof:at:)","title":"func insert<C>(contentsOf: C, at: Self.Index)","type":"method"},{"path":"\/documentation\/scout\/path\/poplast()","title":"func popLast() -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/remove(at:)","title":"func remove(at: Self.Index) -> Self.Element","type":"method"},{"path":"\/documentation\/scout\/path\/removeall(keepingcapacity:)","title":"func removeAll(keepingCapacity: Bool)","type":"method"},{"path":"\/documentation\/scout\/path\/removeall(where:)-13bwz","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/removeall(where:)-6oyg2","title":"func removeAll(where: (Self.Element) throws -> Bool) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/removefirst()","title":"func removeFirst() -> Self.Element","type":"method"},{"path":"\/documentation\/scout\/path\/removefirst(_:)","title":"func removeFirst(Int)","type":"method"},{"path":"\/documentation\/scout\/path\/removelast()","title":"func removeLast() -> Self.Element","type":"method"},{"path":"\/documentation\/scout\/path\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/scout\/path\/removesubrange(_:)-28mkd","title":"func removeSubrange(Range<Self.Index>)","type":"method"},{"path":"\/documentation\/scout\/path\/removesubrange(_:)-3w6oh","title":"func removeSubrange<R>(R)","type":"method"},{"path":"\/documentation\/scout\/path\/replace(_:with:maxreplacements:)","title":"func replace<C, Replacement>(C, with: Replacement, maxReplacements: Int)","type":"method"},{"path":"\/documentation\/scout\/path\/replacesubrange(_:with:)-69vd1","title":"func replaceSubrange<C, R>(R, with: C)","type":"method"},{"path":"\/documentation\/scout\/path\/replacesubrange(_:with:)-8jwu3","title":"func replaceSubrange<C>(Range<Int>, with: C)","type":"method"},{"path":"\/documentation\/scout\/path\/replacesubrange(_:with:)-8v4n8","title":"func replaceSubrange<C>(Range<Self.Index>, with: C)","type":"method"},{"path":"\/documentation\/scout\/path\/replacing(_:with:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/scout\/path\/replacing(_:with:subrange:maxreplacements:)","title":"func replacing<C, Replacement>(C, with: Replacement, subrange: Range<Self.Index>, maxReplacements: Int) -> Self","type":"method"},{"path":"\/documentation\/scout\/path\/reservecapacity(_:)","title":"func reserveCapacity(Int)","type":"method"},{"path":"\/documentation\/scout\/path\/trimprefix(_:)","title":"func trimPrefix<Prefix>(Prefix)","type":"method"},{"path":"\/documentation\/scout\/path\/trimprefix(while:)","title":"func trimPrefix(while: (Self.Element) throws -> Bool) rethrows","type":"method"}],"path":"\/documentation\/scout\/path\/rangereplaceablecollection-implementations","title":"RangeReplaceableCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/scout\/path\/publisher","title":"var publisher: Publishers.Sequence<Self, Never>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/path\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/scout\/path\/compare(_:_:)","title":"func compare<Comparator>(Comparator.Compared, Comparator.Compared) -> ComparisonResult","type":"method"},{"path":"\/documentation\/scout\/path\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/scout\/path\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/flatmap(_:)-4dfav","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/scout\/path\/flatmap(_:)-658d","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/scout\/path\/formatted(_:)","title":"func formatted<S>(S) -> S.FormatOutput","type":"method"},{"path":"\/documentation\/scout\/path\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/map(_:)-3bvvx","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/scout\/path\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/scout\/path\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/scout\/path\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/scout\/path\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/sorted(using:)-1q9xt","title":"func sorted<S, Comparator>(using: S) -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/sorted(using:)-2epe7","title":"func sorted<Comparator>(using: Comparator) -> [Self.Element]","type":"method"},{"path":"\/documentation\/scout\/path\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/scout\/path\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/scout\/path\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/scout\/path","title":"Path","type":"struct"},{"children":[{"title":"Basics","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/key(_:)","title":"case key(String)","type":"case"},{"path":"\/documentation\/scout\/pathelement\/index(_:)","title":"case index(Int)","type":"case"},{"title":"Getting a group information","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/count","title":"case count","type":"case"},{"path":"\/documentation\/scout\/pathelement\/keyslist","title":"case keysList","type":"case"},{"title":"Scope groups","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/filter(_:)","title":"case filter(String)","type":"case"},{"path":"\/documentation\/scout\/pathelement\/slice(_:)","title":"case slice(Bounds)","type":"case"},{"path":"\/documentation\/scout\/pathelement\/slice(_:_:)","title":"static func slice(Bounds.Bound, Bounds.Bound) -> PathElement","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/scout\/pathelement\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/pathelement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/scout\/pathelement\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/integerliteraltype","title":"PathElement.IntegerLiteralType","type":"typealias"}],"path":"\/documentation\/scout\/pathelement\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/stringliteraltype","title":"PathElement.StringLiteralType","type":"typealias"}],"path":"\/documentation\/scout\/pathelement\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/scout\/pathelement\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelement\/pathvalue","title":"var pathValue: PathElement","type":"property"}],"path":"\/documentation\/scout\/pathelement\/pathelementrepresentable-implementations","title":"PathElementRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/scout\/pathelement","title":"PathElement","type":"enum"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/pathelementrepresentable\/pathvalue","title":"var pathValue: PathElement","type":"property"}],"path":"\/documentation\/scout\/pathelementrepresentable","title":"PathElementRepresentable","type":"protocol"},{"children":[{"title":"No filter","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/nofilter","title":"static var noFilter: PathsFilter","type":"property"},{"path":"\/documentation\/scout\/pathsfilter\/targetonly(_:)","title":"case targetOnly(PathsFilter.ValueTarget)","type":"case"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/group","title":"case group","type":"case"},{"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/single","title":"case single","type":"case"},{"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/singleandgroup","title":"case singleAndGroup","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/scout\/pathsfilter\/valuetarget\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/scout\/pathsfilter\/valuetarget","title":"PathsFilter.ValueTarget","type":"enum"},{"title":"Filter keys","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/key(regex:)","title":"static func key(regex: NSRegularExpression) -> PathsFilter","type":"method"},{"path":"\/documentation\/scout\/pathsfilter\/key(regex:target:)","title":"case key(regex: NSRegularExpression, target: PathsFilter.ValueTarget)","type":"case"},{"path":"\/documentation\/scout\/pathsfilter\/key(pattern:target:)","title":"static func key(pattern: String, target: PathsFilter.ValueTarget) throws -> PathsFilter","type":"method"},{"title":"Filter values","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/value(_:)","title":"case value([ValuePredicate])","type":"case"},{"path":"\/documentation\/scout\/pathsfilter\/value(_:_:)-8tfx1","title":"static func value(PathsFilter.ExpressionPredicate, PathsFilter.ExpressionPredicate...) -> PathsFilter","type":"method"},{"path":"\/documentation\/scout\/pathsfilter\/value(_:_:)-2wxh0","title":"static func value(String, String...) throws -> PathsFilter","type":"method"},{"title":"Filter keys and values","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/keyandvalue(pattern:valuepredicate:)","title":"static func keyAndValue(pattern: String, valuePredicate: PathsFilter.FunctionPredicate) throws -> PathsFilter","type":"method"},{"path":"\/documentation\/scout\/pathsfilter\/keyandvalue(keyregex:valuepredicate:)","title":"static func keyAndValue(keyRegex: NSRegularExpression, valuePredicate: PathsFilter.FunctionPredicate) -> PathsFilter","type":"method"},{"path":"\/documentation\/scout\/pathsfilter\/keyandvalue(keyregex:valuepredicates:)","title":"case keyAndValue(keyRegex: NSRegularExpression, valuePredicates: [ValuePredicate])","type":"case"},{"path":"\/documentation\/scout\/pathsfilter\/keyandvalue(keyregex:valuepredicates:_:)","title":"static func keyAndValue(keyRegex: NSRegularExpression, valuePredicates: PathsFilter.ExpressionPredicate, PathsFilter.ExpressionPredicate...) -> PathsFilter","type":"method"},{"path":"\/documentation\/scout\/pathsfilter\/keyandvalue(pattern:valuepredicatesformat:_:)","title":"static func keyAndValue(pattern: String, valuePredicatesFormat: String, String...) throws -> PathsFilter","type":"method"},{"title":"Predicates","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/valuepredicate\/evaluate(with:)","title":"func evaluate(with: ExplorerValue) throws -> Bool","type":"method"}],"path":"\/documentation\/scout\/valuepredicate","title":"ValuePredicate","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/expressionpredicate\/init(format:)","title":"init(format: String) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/expressionpredicate\/evaluate(with:)","title":"func evaluate(with: ExplorerValue) throws -> Bool","type":"method"}],"path":"\/documentation\/scout\/pathsfilter\/expressionpredicate","title":"PathsFilter.ExpressionPredicate","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/functionpredicate\/init(evaluation:)","title":"init(evaluation: PathsFilter.FunctionPredicate.Evaluation)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/functionpredicate\/evaluation-swift.property","title":"var evaluation: PathsFilter.FunctionPredicate.Evaluation","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/functionpredicate\/evaluate(with:)","title":"func evaluate(with: ExplorerValue) throws -> Bool","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/pathsfilter\/functionpredicate\/evaluation-swift.typealias","title":"PathsFilter.FunctionPredicate.Evaluation","type":"typealias"}],"path":"\/documentation\/scout\/pathsfilter\/functionpredicate","title":"PathsFilter.FunctionPredicate","type":"class"}],"path":"\/documentation\/scout\/pathsfilter","title":"PathsFilter","type":"enum"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/valuepredicate\/evaluate(with:)","title":"func evaluate(with: ExplorerValue) throws -> Bool","type":"method"}],"path":"\/documentation\/scout\/valuepredicate","title":"ValuePredicate","type":"protocol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/bounds\/bound\/init(_:)","title":"init(Int)","type":"init"},{"path":"\/documentation\/scout\/bounds\/bound\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/bounds\/bound\/integerliteraltype","title":"Bounds.Bound.IntegerLiteralType","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/bounds\/bound\/first","title":"static let first: Bounds.Bound","type":"property"},{"path":"\/documentation\/scout\/bounds\/bound\/last","title":"static let last: Bounds.Bound","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/bounds\/bound\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/bounds\/bound\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/scout\/bounds\/bound","title":"Bounds.Bound","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/bounds\/init(lower:upper:)","title":"init(lower: Bounds.Bound, upper: Bounds.Bound)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/bounds\/range(arraycount:)","title":"func range(arrayCount: Int) throws -> ClosedRange<Int>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/bounds\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/bounds\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/scout\/bounds","title":"Bounds","type":"struct"},{"title":"Convert and export explorers","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/serializablepathexplorer\/init(data:)","title":"init(data: Data) throws","type":"init"},{"path":"\/documentation\/scout\/serializablepathexplorer\/fromcsv(string:separator:hasheaders:)","title":"static func fromCSV(string: String, separator: Character, hasHeaders: Bool) throws -> Self","type":"method"},{"title":"Get format info","type":"groupMarker"},{"path":"\/documentation\/scout\/serializablepathexplorer\/format","title":"static var format: DataFormat","type":"property"},{"title":"Export as Data","type":"groupMarker"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportdata()","title":"func exportData() throws -> Data","type":"method"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportdata(to:)","title":"func exportData(to: DataFormat) throws -> Data","type":"method"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportdata(to:rootname:)","title":"func exportData(to: DataFormat, rootName: String?) throws -> Data","type":"method"},{"title":"Export as String","type":"groupMarker"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportstring()","title":"func exportString() throws -> String","type":"method"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportstring(to:)","title":"func exportString(to: DataFormat) throws -> String","type":"method"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportstring(to:rootname:)","title":"func exportString(to: DataFormat, rootName: String?) throws -> String","type":"method"},{"title":"Export as CSV","type":"groupMarker"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportcsv()","title":"func exportCSV() throws -> String","type":"method"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportcsv(separator:)","title":"func exportCSV(separator: String?) throws -> String","type":"method"},{"title":"Export folded String","type":"groupMarker"},{"path":"\/documentation\/scout\/serializablepathexplorer\/exportfoldedstring(upto:)","title":"func exportFoldedString(upTo: Int) throws -> String","type":"method"},{"path":"\/documentation\/scout\/serializablepathexplorer\/folded(upto:)","title":"func folded(upTo: Int) -> Self","type":"method"}],"path":"\/documentation\/scout\/serializablepathexplorer","title":"SerializablePathExplorer","type":"protocol"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/scout\/dataformat\/json","title":"case json","type":"case"},{"path":"\/documentation\/scout\/dataformat\/plist","title":"case plist","type":"case"},{"path":"\/documentation\/scout\/dataformat\/xml","title":"case xml","type":"case"},{"path":"\/documentation\/scout\/dataformat\/yaml","title":"case yaml","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/dataformat\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/scout\/dataformat\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/scout\/dataformat\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/dataformat\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/dataformat\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/scout\/dataformat\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/scout\/dataformat","title":"DataFormat","type":"enum"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(value:name:)","title":"init(value: ExplorerValue, name: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/bool","title":"var bool: Bool?","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/data","title":"var data: Data?","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/date","title":"var date: Date?","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/double","title":"var double: Double?","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/int","title":"var int: Int?","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/isgroup","title":"var isGroup: Bool","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/issingle","title":"var isSingle: Bool","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/real","title":"var real: Double?","type":"property"},{"path":"\/documentation\/scout\/codablepathexplorer\/string","title":"var string: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/add(_:at:)-w76g","title":"func add(ExplorerValue, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/adding(_:at:)","title":"func adding(ExplorerValue, at: Path) throws -> CodablePathExplorer<Format>","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/array(of:)","title":"func array<T>(of: T.Type) throws -> [T]","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/delete(_:deleteifempty:)-8sq6g","title":"func delete(Path, deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/deleting(_:deleteifempty:)","title":"func deleting(Path, deleteIfEmpty: Bool) throws -> CodablePathExplorer<Format>","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/dictionary(of:)","title":"func dictionary<T>(of: T.Type) throws -> [String : T]","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/get(_:)","title":"func get(Path) throws -> CodablePathExplorer<Format>","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/listpaths(startingat:filter:)","title":"func listPaths(startingAt: Path?, filter: PathsFilter) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/set(_:keynameto:)-40f4n","title":"func set(Path, keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/set(_:to:)-61aqz","title":"func set(Path, to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/setting(_:keynameto:)","title":"func setting(Path, keyNameTo: String) throws -> CodablePathExplorer<Format>","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/setting(_:to:)","title":"func setting(Path, to: ExplorerValue) throws -> CodablePathExplorer<Format>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/scout\/codablepathexplorer\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/scout\/codablepathexplorer\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(value:)","title":"init(value: ExplorerValue)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/add(_:at:)-13yei","title":"func add(ExplorerValueRepresentable, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/add(_:at:)-1mpqn","title":"func add(ExplorerValueRepresentable, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/add(_:at:)-9ka70","title":"func add(ExplorerValue, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/delete(_:)","title":"func delete(Path) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/delete(_:deleteifempty:)-1iwci","title":"func delete(PathElement..., deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/delete(_:deleteifempty:)-3e7af","title":"func delete([PathElement], deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/listpaths(startingat:)","title":"func listPaths(startingAt: Path?) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/set(_:keynameto:)-1z5hp","title":"func set(PathElement..., keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/set(_:keynameto:)-6dvwq","title":"func set([PathElement], keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/set(_:to:)-15dj0","title":"func set(PathElement..., to: ExplorerValueRepresentable) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/set(_:to:)-40ro5","title":"func set(PathElement..., to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/set(_:to:)-7lp6u","title":"func set(Path, to: ExplorerValueRepresentable) throws","type":"method"}],"path":"\/documentation\/scout\/codablepathexplorer\/pathexplorer-implementations","title":"PathExplorer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/init(data:)","title":"init(data: Data) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportcsv()","title":"func exportCSV() throws -> String","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportcsv(separator:)","title":"func exportCSV(separator: String?) throws -> String","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportdata()","title":"func exportData() throws -> Data","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportdata(to:)","title":"func exportData(to: DataFormat) throws -> Data","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportdata(to:rootname:)","title":"func exportData(to: DataFormat, rootName: String?) throws -> Data","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportfoldedstring(upto:)","title":"func exportFoldedString(upTo: Int) throws -> String","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportstring()","title":"func exportString() throws -> String","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportstring(to:)","title":"func exportString(to: DataFormat) throws -> String","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/exportstring(to:rootname:)","title":"func exportString(to: DataFormat, rootName: String?) throws -> String","type":"method"},{"path":"\/documentation\/scout\/codablepathexplorer\/folded(upto:)","title":"func folded(upTo: Int) -> CodablePathExplorer<Format>","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/format","title":"static var format: DataFormat","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codablepathexplorer\/fromcsv(string:separator:hasheaders:)","title":"static func fromCSV(string: String, separator: Character, hasHeaders: Bool) throws -> CodablePathExplorer<Format>","type":"method"}],"path":"\/documentation\/scout\/codablepathexplorer\/serializablepathexplorer-implementations","title":"SerializablePathExplorer Implementations","type":"symbol"}],"path":"\/documentation\/scout\/codablepathexplorer","title":"CodablePathExplorer","type":"struct"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformat\/dataformat","title":"static var dataFormat: DataFormat","type":"property"},{"path":"\/documentation\/scout\/codableformat\/foldedregexpattern","title":"static var foldedRegexPattern: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformat\/decode(_:from:)","title":"static func decode<D>(D.Type, from: Data) throws -> D","type":"method"},{"path":"\/documentation\/scout\/codableformat\/encode(_:)","title":"static func encode<E>(E) throws -> Data","type":"method"},{"path":"\/documentation\/scout\/codableformat\/encode(_:rootname:)","title":"static func encode<E>(E, rootName: String?) throws -> Data","type":"method"}],"path":"\/documentation\/scout\/codableformat","title":"CodableFormat","type":"protocol"},{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/jsondateiso8601\/dataformat","title":"static let dataFormat: DataFormat","type":"property"},{"path":"\/documentation\/scout\/codableformats\/jsondateiso8601\/foldedregexpattern","title":"static var foldedRegexPattern: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/jsondateiso8601\/decode(_:from:)","title":"static func decode<D>(D.Type, from: Data) throws -> D","type":"method"},{"path":"\/documentation\/scout\/codableformats\/jsondateiso8601\/encode(_:rootname:)","title":"static func encode<E>(E, rootName: String?) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/jsondateiso8601\/encode(_:)","title":"static func encode<E>(E) throws -> Data","type":"method"}],"path":"\/documentation\/scout\/codableformats\/jsondateiso8601\/codableformat-implementations","title":"CodableFormat Implementations","type":"symbol"}],"path":"\/documentation\/scout\/codableformats\/jsondateiso8601","title":"CodableFormats.JsonDateIso8601","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/jsondefault\/dataformat","title":"static var dataFormat: DataFormat","type":"property"},{"path":"\/documentation\/scout\/codableformats\/jsondefault\/foldedregexpattern","title":"static var foldedRegexPattern: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/jsondefault\/decode(_:from:)","title":"static func decode<D>(D.Type, from: Data) throws -> D","type":"method"},{"path":"\/documentation\/scout\/codableformats\/jsondefault\/encode(_:rootname:)","title":"static func encode<E>(E, rootName: String?) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/jsondefault\/encode(_:)","title":"static func encode<E>(E) throws -> Data","type":"method"}],"path":"\/documentation\/scout\/codableformats\/jsondefault\/codableformat-implementations","title":"CodableFormat Implementations","type":"symbol"}],"path":"\/documentation\/scout\/codableformats\/jsondefault","title":"CodableFormats.JsonDefault","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/plistdefault\/dataformat","title":"static var dataFormat: DataFormat","type":"property"},{"path":"\/documentation\/scout\/codableformats\/plistdefault\/foldedregexpattern","title":"static var foldedRegexPattern: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/plistdefault\/decode(_:from:)","title":"static func decode<D>(D.Type, from: Data) throws -> D","type":"method"},{"path":"\/documentation\/scout\/codableformats\/plistdefault\/encode(_:rootname:)","title":"static func encode<E>(E, rootName: String?) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/plistdefault\/encode(_:)","title":"static func encode<E>(E) throws -> Data","type":"method"}],"path":"\/documentation\/scout\/codableformats\/plistdefault\/codableformat-implementations","title":"CodableFormat Implementations","type":"symbol"}],"path":"\/documentation\/scout\/codableformats\/plistdefault","title":"CodableFormats.PlistDefault","type":"enum"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/yamldefault\/dataformat","title":"static var dataFormat: DataFormat","type":"property"},{"path":"\/documentation\/scout\/codableformats\/yamldefault\/foldedregexpattern","title":"static var foldedRegexPattern: String","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/yamldefault\/decode(_:from:)","title":"static func decode<D>(D.Type, from: Data) throws -> D","type":"method"},{"path":"\/documentation\/scout\/codableformats\/yamldefault\/encode(_:rootname:)","title":"static func encode<E>(E, rootName: String?) throws -> Data","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/codableformats\/yamldefault\/encode(_:)","title":"static func encode<E>(E) throws -> Data","type":"method"}],"path":"\/documentation\/scout\/codableformats\/yamldefault\/codableformat-implementations","title":"CodableFormat Implementations","type":"symbol"}],"path":"\/documentation\/scout\/codableformats\/yamldefault","title":"CodableFormats.YamlDefault","type":"enum"}],"path":"\/documentation\/scout\/codableformats","title":"CodableFormats","type":"enum"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/singlechildstrategy\/transform","title":"ExplorerXML.SingleChildStrategy.Transform","type":"typealias"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/singlechildstrategy\/array","title":"static let array: ExplorerXML.SingleChildStrategy","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/singlechildstrategy\/default","title":"static let `default`: ExplorerXML.SingleChildStrategy","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/singlechildstrategy\/dictionary","title":"static let dictionary: ExplorerXML.SingleChildStrategy","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/singlechildstrategy\/custom(_:)","title":"static func custom(ExplorerXML.SingleChildStrategy.Transform) -> ExplorerXML.SingleChildStrategy","type":"method"}],"path":"\/documentation\/scout\/explorerxml\/singlechildstrategy","title":"ExplorerXML.SingleChildStrategy","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/init(booleanliteral:)","title":"init(booleanLiteral: Bool)","type":"init"},{"path":"\/documentation\/scout\/explorerxml\/init(floatliteral:)","title":"init(floatLiteral: Double)","type":"init"},{"path":"\/documentation\/scout\/explorerxml\/init(integerliteral:)","title":"init(integerLiteral: Int)","type":"init"},{"path":"\/documentation\/scout\/explorerxml\/init(stringliteral:)","title":"init(stringLiteral: String)","type":"init"},{"path":"\/documentation\/scout\/explorerxml\/init(value:name:)","title":"init(value: ExplorerValue, name: String?)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/bool","title":"var bool: Bool?","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/data","title":"var data: Data?","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/date","title":"var date: Date?","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/description","title":"var description: String","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/double","title":"var double: Double?","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/int","title":"var int: Int?","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/isgroup","title":"var isGroup: Bool","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/issingle","title":"var isSingle: Bool","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/real","title":"var real: Double?","type":"property"},{"path":"\/documentation\/scout\/explorerxml\/string","title":"var string: String?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/add(_:at:)-1pzz6","title":"func add(ExplorerXML.Element, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/add(_:at:)-4y7o0","title":"func add(ExplorerXML, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/adding(_:at:)-4y55p","title":"func adding(ExplorerXML.Element, at: Path) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/adding(_:at:)-9e3bi","title":"func adding(ExplorerXML, at: Path) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/array(of:)","title":"func array<T>(of: T.Type) throws -> [T]","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/array(of:keepingattributes:singlechildstrategy:)","title":"func array<T>(of: T.Type, keepingAttributes: Bool, singleChildStrategy: ExplorerXML.SingleChildStrategy) throws -> [T]","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/dictionary(of:)","title":"func dictionary<T>(of: T.Type) throws -> [String : T]","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/dictionary(of:keepingattributes:singlechildstrategy:)","title":"func dictionary<T>(of: T.Type, keepingAttributes: Bool, singleChildStrategy: ExplorerXML.SingleChildStrategy) throws -> [String : T]","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/explorervalue(keepingattributes:singlechildstrategy:)","title":"func explorerValue(keepingAttributes: Bool, singleChildStrategy: ExplorerXML.SingleChildStrategy) -> ExplorerValue","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:to:)-2wq5w","title":"func set(Path, to: ExplorerXML) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:to:)-54j6g","title":"func set(Path, to: ExplorerXML.Element) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/setting(_:to:)-4m6ll","title":"func setting(Path, to: ExplorerXML.Element) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/setting(_:to:)-5h22p","title":"func setting(Path, to: ExplorerXML) throws -> ExplorerXML","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/element","title":"ExplorerXML.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Self.StringLiteralType)","type":"init"}],"path":"\/documentation\/scout\/explorerxml\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Self.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/scout\/explorerxml\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/init(value:)","title":"init(value: ExplorerValue)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/add(_:at:)-1bcbx","title":"func add(ExplorerValueRepresentable, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/add(_:at:)-1vd0k","title":"func add(ExplorerValueRepresentable, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/add(_:at:)-4t6ia","title":"func add(ExplorerValue, at: PathElement...) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/add(_:at:)-5c99x","title":"func add(ExplorerValue, at: Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/adding(_:at:)-1pus","title":"func adding(ExplorerValue, at: Path) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/adding(_:at:)-3bl3a","title":"func adding(ExplorerValue, at: PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/adding(_:at:)-5hn92","title":"func adding(ExplorerValueRepresentable, at: Path) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/adding(_:at:)-cwm8","title":"func adding(ExplorerValueRepresentable, at: PathElement...) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/delete(_:)","title":"func delete(Path) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/delete(_:deleteifempty:)-3fqmj","title":"func delete([PathElement], deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/delete(_:deleteifempty:)-9oiah","title":"func delete(PathElement..., deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/delete(_:deleteifempty:)-9pz8","title":"func delete(Path, deleteIfEmpty: Bool) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/deleting(_:deleteifempty:)","title":"func deleting(Path, deleteIfEmpty: Bool) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/get(_:)","title":"func get(Path) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/listpaths(startingat:)","title":"func listPaths(startingAt: Path?) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/listpaths(startingat:filter:)","title":"func listPaths(startingAt: Path?, filter: PathsFilter) throws -> [Path]","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:keynameto:)-1bi3d","title":"func set([PathElement], keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:keynameto:)-3whe6","title":"func set(PathElement..., keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:keynameto:)-8bycm","title":"func set(Path, keyNameTo: String) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:to:)-3d1tv","title":"func set(PathElement..., to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:to:)-45huy","title":"func set(Path, to: ExplorerValue) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:to:)-8wtzf","title":"func set(PathElement..., to: ExplorerValueRepresentable) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/set(_:to:)-ofo9","title":"func set(Path, to: ExplorerValueRepresentable) throws","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/setting(_:keynameto:)","title":"func setting(Path, keyNameTo: String) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/setting(_:to:)-1eczh","title":"func setting(Path, to: ExplorerValue) throws -> ExplorerXML","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/setting(_:to:)-2pw3q","title":"func setting(PathElement..., to: ExplorerValueRepresentable) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/setting(_:to:)-4xlv9","title":"func setting(PathElement..., to: ExplorerValue) throws -> Self","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/setting(_:to:)-7elcu","title":"func setting(Path, to: ExplorerValueRepresentable) throws -> Self","type":"method"}],"path":"\/documentation\/scout\/explorerxml\/pathexplorer-implementations","title":"PathExplorer Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/init(data:)","title":"init(data: Data) throws","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/exportcsv()","title":"func exportCSV() throws -> String","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportcsv(separator:)","title":"func exportCSV(separator: String?) throws -> String","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportdata()","title":"func exportData() throws -> Data","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportdata(to:)","title":"func exportData(to: DataFormat) throws -> Data","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportdata(to:rootname:)","title":"func exportData(to: DataFormat, rootName: String?) throws -> Data","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportfoldedstring(upto:)","title":"func exportFoldedString(upTo: Int) throws -> String","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportstring()","title":"func exportString() throws -> String","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportstring(to:)","title":"func exportString(to: DataFormat) throws -> String","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/exportstring(to:rootname:)","title":"func exportString(to: DataFormat, rootName: String?) throws -> String","type":"method"},{"path":"\/documentation\/scout\/explorerxml\/folded(upto:)","title":"func folded(upTo: Int) -> ExplorerXML","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/format","title":"static var format: DataFormat","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/scout\/explorerxml\/fromcsv(string:separator:hasheaders:)","title":"static func fromCSV(string: String, separator: Character, hasHeaders: Bool) throws -> ExplorerXML","type":"method"}],"path":"\/documentation\/scout\/explorerxml\/serializablepathexplorer-implementations","title":"SerializablePathExplorer Implementations","type":"symbol"}],"path":"\/documentation\/scout\/explorerxml","title":"ExplorerXML","type":"struct"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/scout\/serializationerror\/datatostring","title":"case dataToString","type":"case"},{"path":"\/documentation\/scout\/serializationerror\/notcsvexportable(description:)","title":"case notCSVExportable(description: String)","type":"case"},{"path":"\/documentation\/scout\/serializationerror\/stringtodata","title":"case stringToData","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/serializationerror\/errordescription","title":"var errorDescription: String?","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/serializationerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/scout\/serializationerror\/error-implementations","title":"Error Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/scout\/serializationerror\/failurereason","title":"var failureReason: String?","type":"property"},{"path":"\/documentation\/scout\/serializationerror\/helpanchor","title":"var helpAnchor: String?","type":"property"},{"path":"\/documentation\/scout\/serializationerror\/recoverysuggestion","title":"var recoverySuggestion: String?","type":"property"}],"path":"\/documentation\/scout\/serializationerror\/localizederror-implementations","title":"LocalizedError Implementations","type":"symbol"}],"path":"\/documentation\/scout\/serializationerror","title":"SerializationError","type":"enum"},{"title":"Set and add custom types","type":"groupMarker"},{"path":"\/documentation\/scout\/custom-types-explorervalue","title":"Custom types with ExplorerValue","type":"article"},{"children":[{"title":"Initializers","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/explorervaluecreatable\/init(from:)-7khyl","title":"init(from: ExplorerValue) throws","type":"init"}],"title":"ExplorerValueCreatable Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/explorervaluecreatable\/init(from:)-2m6tw","title":"init(from: ExplorerValue) throws","type":"init"}],"path":"\/documentation\/scout\/explorervaluecreatable","title":"ExplorerValueCreatable","type":"protocol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/scout\/explorervaluerepresentable\/explorervalue()-9wvc3","title":"func explorerValue() throws -> ExplorerValue","type":"method"}],"title":"ExplorerValueRepresentable Implementations","type":"groupMarker"}],"path":"\/documentation\/scout\/explorervaluerepresentable\/explorervalue()-1gz0u","title":"func explorerValue() throws -> ExplorerValue","type":"method"}],"path":"\/documentation\/scout\/explorervaluerepresentable","title":"ExplorerValueRepresentable","type":"protocol"},{"path":"\/documentation\/scout\/explorervalueconvertible","title":"ExplorerValueConvertible","type":"typealias"}],"path":"\/documentation\/scout","title":"Scout","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":1}}